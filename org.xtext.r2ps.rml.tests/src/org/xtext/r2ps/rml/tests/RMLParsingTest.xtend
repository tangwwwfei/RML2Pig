/*
 * generated by Xtext 2.20.0
 */
package org.xtext.r2ps.rml.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.io.BufferedReader
import java.io.File
import java.io.FileInputStream
import java.io.InputStreamReader
import java.util.ArrayList
import java.util.List
import java.io.FileWriter
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.xtext.r2ps.rml.generator.RMLGenerator
import org.xtext.r2ps.rml.rML.Mapping

@ExtendWith(InjectionExtension)
@InjectWith(RMLInjectorProvider)
class RMLParsingTest {
	@Inject
	ParseHelper<Mapping> parseHelper
	
	@Test
	def void loadModel() {
		var filelist = new ArrayList<File>()
		getFileList(filelist, "E:/RML2PigAndScala/test/resources/passed/test-cases/")
		for (file : filelist) {
			var filepath = file.getPath()
			val result = parseHelper.parse(readFile(filepath))
			if (result !== null) {
				var errors = result.eResource.errors
				if (errors.isEmpty()) {
					print("Found:" + filepath + "\r\n")
					val fsa = new InMemoryFileSystemAccess()
        			new RMLGenerator().doGenerate(result.eResource, fsa, null)
        			var files = fsa.getAllFiles()
        			var keys = files.keySet()
        			for	(key : keys) {
        				var writer = new FileWriter(filepath+".xmi", false)
        				var str = files.get(key) as String
        				str = str.replace('<AbsolutePath></AbsolutePath>','<AbsolutePath>'+file.getCanonicalPath()+'</AbsolutePath>')
        				writer.write(str)
        				writer.close()
        			}
				}
				else{
					System.err.print("Error:" + filepath + "\r\n")
				}
				for (error : errors) {
					print(error + "\r\n")
				}
				Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: ?errors.join(", ")?''')
			}
			else{
				System.err.print("Invalid file:" + filepath + "\r\n")
			}
		}
	}
	
	def String readFile(String filePath){
		var buffer = new StringBuffer()
        var is = new FileInputStream(filePath);
        var reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
        var line = reader.readLine();
        while (line !== null) {
            buffer.append(line);
            buffer.append("\r\n");
            line = reader.readLine();
        }
        reader.close();
        is.close();
        return buffer.toString()
    }
    
	def void getFileList(List<File> filelist, String strPath) {
		var dir = new File(strPath);
		var files = dir.listFiles();
		if (files !== null) {
			for (file : files) {
				var fileName = file.getName();
				if (file.isDirectory()) {
					getFileList(filelist, file.getAbsolutePath());
				} else if (fileName.endsWith(".ttl") && !fileName.endsWith("output.ttl") && !fileName.endsWith(".out.ttl")
					&& !fileName.endsWith(".metadata.ttl") && !fileName.startsWith("resource")) {
					filelist.add(file);
				}
			}
		}
	}
}
