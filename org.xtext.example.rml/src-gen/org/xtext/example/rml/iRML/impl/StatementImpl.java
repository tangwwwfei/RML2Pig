/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.rml.iRML.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.rml.iRML.Directive;
import org.xtext.example.rml.iRML.IRMLPackage;
import org.xtext.example.rml.iRML.Statement;
import org.xtext.example.rml.iRML.Triples;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.rml.iRML.impl.StatementImpl#getDirective <em>Directive</em>}</li>
 *   <li>{@link org.xtext.example.rml.iRML.impl.StatementImpl#getTriple <em>Triple</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getDirective() <em>Directive</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirective()
   * @generated
   * @ordered
   */
  protected Directive directive;

  /**
   * The cached value of the '{@link #getTriple() <em>Triple</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriple()
   * @generated
   * @ordered
   */
  protected Triples triple;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IRMLPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directive getDirective()
  {
    return directive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDirective(Directive newDirective, NotificationChain msgs)
  {
    Directive oldDirective = directive;
    directive = newDirective;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IRMLPackage.STATEMENT__DIRECTIVE, oldDirective, newDirective);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirective(Directive newDirective)
  {
    if (newDirective != directive)
    {
      NotificationChain msgs = null;
      if (directive != null)
        msgs = ((InternalEObject)directive).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IRMLPackage.STATEMENT__DIRECTIVE, null, msgs);
      if (newDirective != null)
        msgs = ((InternalEObject)newDirective).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IRMLPackage.STATEMENT__DIRECTIVE, null, msgs);
      msgs = basicSetDirective(newDirective, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IRMLPackage.STATEMENT__DIRECTIVE, newDirective, newDirective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Triples getTriple()
  {
    return triple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTriple(Triples newTriple, NotificationChain msgs)
  {
    Triples oldTriple = triple;
    triple = newTriple;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IRMLPackage.STATEMENT__TRIPLE, oldTriple, newTriple);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTriple(Triples newTriple)
  {
    if (newTriple != triple)
    {
      NotificationChain msgs = null;
      if (triple != null)
        msgs = ((InternalEObject)triple).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IRMLPackage.STATEMENT__TRIPLE, null, msgs);
      if (newTriple != null)
        msgs = ((InternalEObject)newTriple).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IRMLPackage.STATEMENT__TRIPLE, null, msgs);
      msgs = basicSetTriple(newTriple, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IRMLPackage.STATEMENT__TRIPLE, newTriple, newTriple));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IRMLPackage.STATEMENT__DIRECTIVE:
        return basicSetDirective(null, msgs);
      case IRMLPackage.STATEMENT__TRIPLE:
        return basicSetTriple(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IRMLPackage.STATEMENT__DIRECTIVE:
        return getDirective();
      case IRMLPackage.STATEMENT__TRIPLE:
        return getTriple();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IRMLPackage.STATEMENT__DIRECTIVE:
        setDirective((Directive)newValue);
        return;
      case IRMLPackage.STATEMENT__TRIPLE:
        setTriple((Triples)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IRMLPackage.STATEMENT__DIRECTIVE:
        setDirective((Directive)null);
        return;
      case IRMLPackage.STATEMENT__TRIPLE:
        setTriple((Triples)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IRMLPackage.STATEMENT__DIRECTIVE:
        return directive != null;
      case IRMLPackage.STATEMENT__TRIPLE:
        return triple != null;
    }
    return super.eIsSet(featureID);
  }

} //StatementImpl
