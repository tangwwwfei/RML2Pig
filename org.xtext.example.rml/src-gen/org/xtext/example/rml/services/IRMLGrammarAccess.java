/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.rml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IRMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Mapping");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Mapping:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cDirectiveAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cDirectiveDirectiveParserRuleCall_0_0_0 = (RuleCall)cDirectiveAssignment_0_0.eContents().get(0);
		private final Assignment cTripleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTripleTriplesParserRuleCall_0_1_0 = (RuleCall)cTripleAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//	(directive=Directive | triple=Triples) '.';
		@Override public ParserRule getRule() { return rule; }
		
		//(directive=Directive | triple=Triples) '.'
		public Group getGroup() { return cGroup; }
		
		//directive=Directive | triple=Triples
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//directive=Directive
		public Assignment getDirectiveAssignment_0_0() { return cDirectiveAssignment_0_0; }
		
		//Directive
		public RuleCall getDirectiveDirectiveParserRuleCall_0_0_0() { return cDirectiveDirectiveParserRuleCall_0_0_0; }
		
		//triple=Triples
		public Assignment getTripleAssignment_0_1() { return cTripleAssignment_0_1; }
		
		//Triples
		public RuleCall getTripleTriplesParserRuleCall_0_1_0() { return cTripleTriplesParserRuleCall_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Directive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrefixPrefixIDParserRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBaseBaseParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		
		//Directive:
		//	prefix=PrefixID | base=Base;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=PrefixID | base=Base
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//prefix=PrefixID
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//PrefixID
		public RuleCall getPrefixPrefixIDParserRuleCall_0_0() { return cPrefixPrefixIDParserRuleCall_0_0; }
		
		//base=Base
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }
		
		//Base
		public RuleCall getBaseBaseParserRuleCall_1_0() { return cBaseBaseParserRuleCall_1_0; }
	}
	public class PrefixIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.PrefixID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrefixNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixNamePrefixNameParserRuleCall_1_0 = (RuleCall)cPrefixNameAssignment_1.eContents().get(0);
		private final Assignment cUriRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriRefURIREFTerminalRuleCall_2_0 = (RuleCall)cUriRefAssignment_2.eContents().get(0);
		
		//PrefixID:
		//	'@prefix' prefixName=PrefixName uriRef=URIREF;
		@Override public ParserRule getRule() { return rule; }
		
		//'@prefix' prefixName=PrefixName uriRef=URIREF
		public Group getGroup() { return cGroup; }
		
		//'@prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//prefixName=PrefixName
		public Assignment getPrefixNameAssignment_1() { return cPrefixNameAssignment_1; }
		
		//PrefixName
		public RuleCall getPrefixNamePrefixNameParserRuleCall_1_0() { return cPrefixNamePrefixNameParserRuleCall_1_0; }
		
		//uriRef=URIREF
		public Assignment getUriRefAssignment_2() { return cUriRefAssignment_2; }
		
		//URIREF
		public RuleCall getUriRefURIREFTerminalRuleCall_2_0() { return cUriRefURIREFTerminalRuleCall_2_0; }
	}
	public class BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Base");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUriRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUriRefURIREFTerminalRuleCall_1_0 = (RuleCall)cUriRefAssignment_1.eContents().get(0);
		
		//Base:
		//	'@base' uriRef=URIREF;
		@Override public ParserRule getRule() { return rule; }
		
		//'@base' uriRef=URIREF
		public Group getGroup() { return cGroup; }
		
		//'@base'
		public Keyword getBaseKeyword_0() { return cBaseKeyword_0; }
		
		//uriRef=URIREF
		public Assignment getUriRefAssignment_1() { return cUriRefAssignment_1; }
		
		//URIREF
		public RuleCall getUriRefURIREFTerminalRuleCall_1_0() { return cUriRefURIREFTerminalRuleCall_1_0; }
	}
	public class TriplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Triples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectSubjectParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Assignment cPredicateObjectListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateObjectListPredicateObjectListParserRuleCall_1_0 = (RuleCall)cPredicateObjectListAssignment_1.eContents().get(0);
		
		//Triples:
		//	subject=Subject
		//	predicateObjectList=PredicateObjectList;
		@Override public ParserRule getRule() { return rule; }
		
		//subject=Subject predicateObjectList=PredicateObjectList
		public Group getGroup() { return cGroup; }
		
		//subject=Subject
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }
		
		//Subject
		public RuleCall getSubjectSubjectParserRuleCall_0_0() { return cSubjectSubjectParserRuleCall_0_0; }
		
		//predicateObjectList=PredicateObjectList
		public Assignment getPredicateObjectListAssignment_1() { return cPredicateObjectListAssignment_1; }
		
		//PredicateObjectList
		public RuleCall getPredicateObjectListPredicateObjectListParserRuleCall_1_0() { return cPredicateObjectListPredicateObjectListParserRuleCall_1_0; }
	}
	public class PredicateObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.PredicateObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerbVerbParserRuleCall_0_0 = (RuleCall)cVerbAssignment_0.eContents().get(0);
		private final Assignment cObjectListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectListObjectListParserRuleCall_1_0 = (RuleCall)cObjectListAssignment_1.eContents().get(0);
		
		//PredicateObject:
		//	verb=Verb objectList=ObjectList;
		@Override public ParserRule getRule() { return rule; }
		
		//verb=Verb objectList=ObjectList
		public Group getGroup() { return cGroup; }
		
		//verb=Verb
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//Verb
		public RuleCall getVerbVerbParserRuleCall_0_0() { return cVerbVerbParserRuleCall_0_0; }
		
		//objectList=ObjectList
		public Assignment getObjectListAssignment_1() { return cObjectListAssignment_1; }
		
		//ObjectList
		public RuleCall getObjectListObjectListParserRuleCall_1_0() { return cObjectListObjectListParserRuleCall_1_0; }
	}
	public class PredicateObjectListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.PredicateObjectList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateObjectsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicateObjectsPredicateObjectParserRuleCall_0_0 = (RuleCall)cPredicateObjectsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPredicateObjectsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredicateObjectsPredicateObjectParserRuleCall_1_1_0 = (RuleCall)cPredicateObjectsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PredicateObjectList:
		//	predicateObjects+=PredicateObject (';' predicateObjects+=PredicateObject)* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//predicateObjects+=PredicateObject (';' predicateObjects+=PredicateObject)* ';'?
		public Group getGroup() { return cGroup; }
		
		//predicateObjects+=PredicateObject
		public Assignment getPredicateObjectsAssignment_0() { return cPredicateObjectsAssignment_0; }
		
		//PredicateObject
		public RuleCall getPredicateObjectsPredicateObjectParserRuleCall_0_0() { return cPredicateObjectsPredicateObjectParserRuleCall_0_0; }
		
		//(';' predicateObjects+=PredicateObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//predicateObjects+=PredicateObject
		public Assignment getPredicateObjectsAssignment_1_1() { return cPredicateObjectsAssignment_1_1; }
		
		//PredicateObject
		public RuleCall getPredicateObjectsPredicateObjectParserRuleCall_1_1_0() { return cPredicateObjectsPredicateObjectParserRuleCall_1_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ObjectListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.ObjectList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectsObjectParserRuleCall_0_0 = (RuleCall)cObjectsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cObjectsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectsObjectParserRuleCall_1_1_0 = (RuleCall)cObjectsAssignment_1_1.eContents().get(0);
		
		//ObjectList:
		//	objects+=Object (',' objects+=Object)*;
		@Override public ParserRule getRule() { return rule; }
		
		//objects+=Object (',' objects+=Object)*
		public Group getGroup() { return cGroup; }
		
		//objects+=Object
		public Assignment getObjectsAssignment_0() { return cObjectsAssignment_0; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_0_0() { return cObjectsObjectParserRuleCall_0_0; }
		
		//(',' objects+=Object)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//objects+=Object
		public Assignment getObjectsAssignment_1_1() { return cObjectsAssignment_1_1; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_1_1_0() { return cObjectsObjectParserRuleCall_1_1_0; }
	}
	public class VerbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Verb");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cIsAAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsAAKeyword_1_0 = (Keyword)cIsAAssignment_1.eContents().get(0);
		
		//Verb:
		//	predicate=Predicate | isA?='a';
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate | isA?='a'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//isA?='a'
		public Assignment getIsAAssignment_1() { return cIsAAssignment_1; }
		
		//'a'
		public Keyword getIsAAKeyword_1_0() { return cIsAAKeyword_1_0; }
	}
	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Subject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cResourceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cResourceIResourceParserRuleCall_0_0 = (RuleCall)cResourceAssignment_0.eContents().get(0);
		private final Assignment cBlankAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBlankBlankParserRuleCall_1_0 = (RuleCall)cBlankAssignment_1.eContents().get(0);
		
		//Subject:
		//	resource=iResource | blank=Blank;
		@Override public ParserRule getRule() { return rule; }
		
		//resource=iResource | blank=Blank
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//resource=iResource
		public Assignment getResourceAssignment_0() { return cResourceAssignment_0; }
		
		//iResource
		public RuleCall getResourceIResourceParserRuleCall_0_0() { return cResourceIResourceParserRuleCall_0_0; }
		
		//blank=Blank
		public Assignment getBlankAssignment_1() { return cBlankAssignment_1; }
		
		//Blank
		public RuleCall getBlankBlankParserRuleCall_1_0() { return cBlankBlankParserRuleCall_1_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Predicate");
		private final RuleCall cIResourceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Predicate iResource:
		//	iResource;
		@Override public ParserRule getRule() { return rule; }
		
		//iResource
		public RuleCall getIResourceParserRuleCall() { return cIResourceParserRuleCall; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cResourceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cResourceIResourceParserRuleCall_0_0 = (RuleCall)cResourceAssignment_0.eContents().get(0);
		private final Assignment cBlankAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBlankBlankParserRuleCall_1_0 = (RuleCall)cBlankAssignment_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralLiteralParserRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		
		//Object:
		//	resource=iResource | blank=Blank | literal=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//resource=iResource | blank=Blank | literal=Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//resource=iResource
		public Assignment getResourceAssignment_0() { return cResourceAssignment_0; }
		
		//iResource
		public RuleCall getResourceIResourceParserRuleCall_0_0() { return cResourceIResourceParserRuleCall_0_0; }
		
		//blank=Blank
		public Assignment getBlankAssignment_1() { return cBlankAssignment_1; }
		
		//Blank
		public RuleCall getBlankBlankParserRuleCall_1_0() { return cBlankBlankParserRuleCall_1_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_2_0() { return cLiteralLiteralParserRuleCall_2_0; }
	}
	public class LanguageStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.LanguageString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQutoedStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQutoedStringQuotedStringParserRuleCall_0_0 = (RuleCall)cQutoedStringAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLangAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLangIDTerminalRuleCall_1_1_0 = (RuleCall)cLangAssignment_1_1.eContents().get(0);
		
		//LanguageString:
		//	qutoedString=QuotedString ('@' lang=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//qutoedString=QuotedString ('@' lang=ID)?
		public Group getGroup() { return cGroup; }
		
		//qutoedString=QuotedString
		public Assignment getQutoedStringAssignment_0() { return cQutoedStringAssignment_0; }
		
		//QuotedString
		public RuleCall getQutoedStringQuotedStringParserRuleCall_0_0() { return cQutoedStringQuotedStringParserRuleCall_0_0; }
		
		//('@' lang=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//lang=ID
		public Assignment getLangAssignment_1_1() { return cLangAssignment_1_1; }
		
		//ID
		public RuleCall getLangIDTerminalRuleCall_1_1_0() { return cLangIDTerminalRuleCall_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLanguageStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLanguageStringLanguageStringParserRuleCall_0_0 = (RuleCall)cLanguageStringAssignment_0.eContents().get(0);
		private final Assignment cDatatypeStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDatatypeStringDatatypeStringParserRuleCall_1_0 = (RuleCall)cDatatypeStringAssignment_1.eContents().get(0);
		private final Assignment cDwordAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDwordINTTerminalRuleCall_2_0 = (RuleCall)cDwordAssignment_2.eContents().get(0);
		private final Assignment cRealAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRealDOUBLETerminalRuleCall_3_0 = (RuleCall)cRealAssignment_3.eContents().get(0);
		private final Assignment cDecimalAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDecimalDECIMALTerminalRuleCall_4_0 = (RuleCall)cDecimalAssignment_4.eContents().get(0);
		private final Assignment cBoolAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBoolBooleanParserRuleCall_5_0 = (RuleCall)cBoolAssignment_5.eContents().get(0);
		
		//Literal:
		//	languageString=LanguageString | datatypeString=DatatypeString | dword=INT | real=DOUBLE | decimal=DECIMAL |
		//	bool=Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//languageString=LanguageString | datatypeString=DatatypeString | dword=INT | real=DOUBLE | decimal=DECIMAL | bool=Boolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//languageString=LanguageString
		public Assignment getLanguageStringAssignment_0() { return cLanguageStringAssignment_0; }
		
		//LanguageString
		public RuleCall getLanguageStringLanguageStringParserRuleCall_0_0() { return cLanguageStringLanguageStringParserRuleCall_0_0; }
		
		//datatypeString=DatatypeString
		public Assignment getDatatypeStringAssignment_1() { return cDatatypeStringAssignment_1; }
		
		//DatatypeString
		public RuleCall getDatatypeStringDatatypeStringParserRuleCall_1_0() { return cDatatypeStringDatatypeStringParserRuleCall_1_0; }
		
		//dword=INT
		public Assignment getDwordAssignment_2() { return cDwordAssignment_2; }
		
		//INT
		public RuleCall getDwordINTTerminalRuleCall_2_0() { return cDwordINTTerminalRuleCall_2_0; }
		
		//real=DOUBLE
		public Assignment getRealAssignment_3() { return cRealAssignment_3; }
		
		//DOUBLE
		public RuleCall getRealDOUBLETerminalRuleCall_3_0() { return cRealDOUBLETerminalRuleCall_3_0; }
		
		//decimal=DECIMAL
		public Assignment getDecimalAssignment_4() { return cDecimalAssignment_4; }
		
		//DECIMAL
		public RuleCall getDecimalDECIMALTerminalRuleCall_4_0() { return cDecimalDECIMALTerminalRuleCall_4_0; }
		
		//bool=Boolean
		public Assignment getBoolAssignment_5() { return cBoolAssignment_5; }
		
		//Boolean
		public RuleCall getBoolBooleanParserRuleCall_5_0() { return cBoolBooleanParserRuleCall_5_0; }
	}
	public class DatatypeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.DatatypeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQutoedStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQutoedStringQuotedStringParserRuleCall_0_0 = (RuleCall)cQutoedStringAssignment_0.eContents().get(0);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResourceIResourceParserRuleCall_2_0 = (RuleCall)cResourceAssignment_2.eContents().get(0);
		
		//DatatypeString:
		//	qutoedString=QuotedString '^^' resource=iResource;
		@Override public ParserRule getRule() { return rule; }
		
		//qutoedString=QuotedString '^^' resource=iResource
		public Group getGroup() { return cGroup; }
		
		//qutoedString=QuotedString
		public Assignment getQutoedStringAssignment_0() { return cQutoedStringAssignment_0; }
		
		//QuotedString
		public RuleCall getQutoedStringQuotedStringParserRuleCall_0_0() { return cQutoedStringQuotedStringParserRuleCall_0_0; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_1() { return cCircumflexAccentCircumflexAccentKeyword_1; }
		
		//resource=iResource
		public Assignment getResourceAssignment_2() { return cResourceAssignment_2; }
		
		//iResource
		public RuleCall getResourceIResourceParserRuleCall_2_0() { return cResourceIResourceParserRuleCall_2_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class BlankElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Blank");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNodeIDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNodeIDNodeIDParserRuleCall_0_0 = (RuleCall)cNodeIDAssignment_0.eContents().get(0);
		private final Assignment cIsSquareAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cIsSquareAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicateObjectListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicateObjectListPredicateObjectListParserRuleCall_2_1_0 = (RuleCall)cPredicateObjectListAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cCollectionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCollectionCollectionParserRuleCall_3_0 = (RuleCall)cCollectionAssignment_3.eContents().get(0);
		
		//Blank:
		//	nodeID=NodeID | isSquare?='[]' | '[' predicateObjectList=PredicateObjectList ']' | collection=Collection;
		@Override public ParserRule getRule() { return rule; }
		
		//nodeID=NodeID | isSquare?='[]' | '[' predicateObjectList=PredicateObjectList ']' | collection=Collection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nodeID=NodeID
		public Assignment getNodeIDAssignment_0() { return cNodeIDAssignment_0; }
		
		//NodeID
		public RuleCall getNodeIDNodeIDParserRuleCall_0_0() { return cNodeIDNodeIDParserRuleCall_0_0; }
		
		//isSquare?='[]'
		public Assignment getIsSquareAssignment_1() { return cIsSquareAssignment_1; }
		
		//'[]'
		public Keyword getIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0() { return cIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//'[' predicateObjectList=PredicateObjectList ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//predicateObjectList=PredicateObjectList
		public Assignment getPredicateObjectListAssignment_2_1() { return cPredicateObjectListAssignment_2_1; }
		
		//PredicateObjectList
		public RuleCall getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0() { return cPredicateObjectListPredicateObjectListParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//collection=Collection
		public Assignment getCollectionAssignment_3() { return cCollectionAssignment_3; }
		
		//Collection
		public RuleCall getCollectionCollectionParserRuleCall_3_0() { return cCollectionCollectionParserRuleCall_3_0; }
	}
	public class ItemListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.ItemList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectsObjectParserRuleCall_0_0 = (RuleCall)cObjectsAssignment_0.eContents().get(0);
		private final Assignment cObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectsObjectParserRuleCall_1_0 = (RuleCall)cObjectsAssignment_1.eContents().get(0);
		
		//ItemList:
		//	objects+=Object objects+=Object*;
		@Override public ParserRule getRule() { return rule; }
		
		//objects+=Object objects+=Object*
		public Group getGroup() { return cGroup; }
		
		//objects+=Object
		public Assignment getObjectsAssignment_0() { return cObjectsAssignment_0; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_0_0() { return cObjectsObjectParserRuleCall_0_0; }
		
		//objects+=Object*
		public Assignment getObjectsAssignment_1() { return cObjectsAssignment_1; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_1_0() { return cObjectsObjectParserRuleCall_1_0; }
	}
	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Collection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemListItemListParserRuleCall_2_0 = (RuleCall)cItemListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Collection:
		//	{Collection} '(' itemList=ItemList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Collection} '(' itemList=ItemList? ')'
		public Group getGroup() { return cGroup; }
		
		//{Collection}
		public Action getCollectionAction_0() { return cCollectionAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//itemList=ItemList?
		public Assignment getItemListAssignment_2() { return cItemListAssignment_2; }
		
		//ItemList
		public RuleCall getItemListItemListParserRuleCall_2_0() { return cItemListItemListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.iResource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUriRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUriRefURIREFTerminalRuleCall_0_0 = (RuleCall)cUriRefAssignment_0.eContents().get(0);
		private final Assignment cQnameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQnameQnameParserRuleCall_1_0 = (RuleCall)cQnameAssignment_1.eContents().get(0);
		
		//iResource:
		//	uriRef=URIREF | qname=Qname;
		@Override public ParserRule getRule() { return rule; }
		
		//uriRef=URIREF | qname=Qname
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//uriRef=URIREF
		public Assignment getUriRefAssignment_0() { return cUriRefAssignment_0; }
		
		//URIREF
		public RuleCall getUriRefURIREFTerminalRuleCall_0_0() { return cUriRefURIREFTerminalRuleCall_0_0; }
		
		//qname=Qname
		public Assignment getQnameAssignment_1() { return cQnameAssignment_1; }
		
		//Qname
		public RuleCall getQnameQnameParserRuleCall_1_0() { return cQnameQnameParserRuleCall_1_0; }
	}
	public class NodeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.NodeID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NodeID:
		//	'_:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'_:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'_:'
		public Keyword get_Keyword_0() { return c_Keyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class QnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.Qname");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQnameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrefixNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixNamePrefixNameParserRuleCall_1_0 = (RuleCall)cPrefixNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Qname:
		//	{Qname} => prefixName=PrefixName => name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Qname} => prefixName=PrefixName => name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Qname}
		public Action getQnameAction_0() { return cQnameAction_0; }
		
		//=> prefixName=PrefixName
		public Assignment getPrefixNameAssignment_1() { return cPrefixNameAssignment_1; }
		
		//PrefixName
		public RuleCall getPrefixNamePrefixNameParserRuleCall_1_0() { return cPrefixNamePrefixNameParserRuleCall_1_0; }
		
		//=> name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class PrefixNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.PrefixName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrefixName:
		//	ID? ':';
		@Override public ParserRule getRule() { return rule; }
		
		//ID? ':'
		public Group getGroup() { return cGroup; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class QuotedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.QuotedString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QuotedString:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final MappingElements pMapping;
	private final StatementElements pStatement;
	private final DirectiveElements pDirective;
	private final PrefixIDElements pPrefixID;
	private final BaseElements pBase;
	private final TriplesElements pTriples;
	private final PredicateObjectElements pPredicateObject;
	private final PredicateObjectListElements pPredicateObjectList;
	private final ObjectListElements pObjectList;
	private final VerbElements pVerb;
	private final SubjectElements pSubject;
	private final PredicateElements pPredicate;
	private final ObjectElements pObject;
	private final LanguageStringElements pLanguageString;
	private final LiteralElements pLiteral;
	private final DatatypeStringElements pDatatypeString;
	private final BooleanElements pBoolean;
	private final BlankElements pBlank;
	private final ItemListElements pItemList;
	private final CollectionElements pCollection;
	private final IResourceElements pIResource;
	private final NodeIDElements pNodeID;
	private final QnameElements pQname;
	private final PrefixNameElements pPrefixName;
	private final QuotedStringElements pQuotedString;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tURIREF;
	private final TerminalRule tID;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IRMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMapping = new MappingElements();
		this.pStatement = new StatementElements();
		this.pDirective = new DirectiveElements();
		this.pPrefixID = new PrefixIDElements();
		this.pBase = new BaseElements();
		this.pTriples = new TriplesElements();
		this.pPredicateObject = new PredicateObjectElements();
		this.pPredicateObjectList = new PredicateObjectListElements();
		this.pObjectList = new ObjectListElements();
		this.pVerb = new VerbElements();
		this.pSubject = new SubjectElements();
		this.pPredicate = new PredicateElements();
		this.pObject = new ObjectElements();
		this.pLanguageString = new LanguageStringElements();
		this.pLiteral = new LiteralElements();
		this.pDatatypeString = new DatatypeStringElements();
		this.pBoolean = new BooleanElements();
		this.pBlank = new BlankElements();
		this.pItemList = new ItemListElements();
		this.pCollection = new CollectionElements();
		this.pIResource = new IResourceElements();
		this.pNodeID = new NodeIDElements();
		this.pQname = new QnameElements();
		this.pPrefixName = new PrefixNameElements();
		this.pQuotedString = new QuotedStringElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.DOUBLE");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.DECIMAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.EXPONENT");
		this.tURIREF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.URIREF");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.ID");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rml.IRML.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.rml.IRML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mapping:
	//	statements+=Statement*;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Statement:
	//	(directive=Directive | triple=Triples) '.';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Directive:
	//	prefix=PrefixID | base=Base;
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	//PrefixID:
	//	'@prefix' prefixName=PrefixName uriRef=URIREF;
	public PrefixIDElements getPrefixIDAccess() {
		return pPrefixID;
	}
	
	public ParserRule getPrefixIDRule() {
		return getPrefixIDAccess().getRule();
	}
	
	//Base:
	//	'@base' uriRef=URIREF;
	public BaseElements getBaseAccess() {
		return pBase;
	}
	
	public ParserRule getBaseRule() {
		return getBaseAccess().getRule();
	}
	
	//Triples:
	//	subject=Subject
	//	predicateObjectList=PredicateObjectList;
	public TriplesElements getTriplesAccess() {
		return pTriples;
	}
	
	public ParserRule getTriplesRule() {
		return getTriplesAccess().getRule();
	}
	
	//PredicateObject:
	//	verb=Verb objectList=ObjectList;
	public PredicateObjectElements getPredicateObjectAccess() {
		return pPredicateObject;
	}
	
	public ParserRule getPredicateObjectRule() {
		return getPredicateObjectAccess().getRule();
	}
	
	//PredicateObjectList:
	//	predicateObjects+=PredicateObject (';' predicateObjects+=PredicateObject)* ';'?;
	public PredicateObjectListElements getPredicateObjectListAccess() {
		return pPredicateObjectList;
	}
	
	public ParserRule getPredicateObjectListRule() {
		return getPredicateObjectListAccess().getRule();
	}
	
	//ObjectList:
	//	objects+=Object (',' objects+=Object)*;
	public ObjectListElements getObjectListAccess() {
		return pObjectList;
	}
	
	public ParserRule getObjectListRule() {
		return getObjectListAccess().getRule();
	}
	
	//Verb:
	//	predicate=Predicate | isA?='a';
	public VerbElements getVerbAccess() {
		return pVerb;
	}
	
	public ParserRule getVerbRule() {
		return getVerbAccess().getRule();
	}
	
	//Subject:
	//	resource=iResource | blank=Blank;
	public SubjectElements getSubjectAccess() {
		return pSubject;
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}
	
	//Predicate iResource:
	//	iResource;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Object:
	//	resource=iResource | blank=Blank | literal=Literal;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//LanguageString:
	//	qutoedString=QuotedString ('@' lang=ID)?;
	public LanguageStringElements getLanguageStringAccess() {
		return pLanguageString;
	}
	
	public ParserRule getLanguageStringRule() {
		return getLanguageStringAccess().getRule();
	}
	
	//Literal:
	//	languageString=LanguageString | datatypeString=DatatypeString | dword=INT | real=DOUBLE | decimal=DECIMAL |
	//	bool=Boolean;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//DatatypeString:
	//	qutoedString=QuotedString '^^' resource=iResource;
	public DatatypeStringElements getDatatypeStringAccess() {
		return pDatatypeString;
	}
	
	public ParserRule getDatatypeStringRule() {
		return getDatatypeStringAccess().getRule();
	}
	
	//Boolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Blank:
	//	nodeID=NodeID | isSquare?='[]' | '[' predicateObjectList=PredicateObjectList ']' | collection=Collection;
	public BlankElements getBlankAccess() {
		return pBlank;
	}
	
	public ParserRule getBlankRule() {
		return getBlankAccess().getRule();
	}
	
	//ItemList:
	//	objects+=Object objects+=Object*;
	public ItemListElements getItemListAccess() {
		return pItemList;
	}
	
	public ParserRule getItemListRule() {
		return getItemListAccess().getRule();
	}
	
	//Collection:
	//	{Collection} '(' itemList=ItemList? ')';
	public CollectionElements getCollectionAccess() {
		return pCollection;
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}
	
	//iResource:
	//	uriRef=URIREF | qname=Qname;
	public IResourceElements getIResourceAccess() {
		return pIResource;
	}
	
	public ParserRule getIResourceRule() {
		return getIResourceAccess().getRule();
	}
	
	//NodeID:
	//	'_:' name=ID;
	public NodeIDElements getNodeIDAccess() {
		return pNodeID;
	}
	
	public ParserRule getNodeIDRule() {
		return getNodeIDAccess().getRule();
	}
	
	//Qname:
	//	{Qname} => prefixName=PrefixName => name=ID?;
	public QnameElements getQnameAccess() {
		return pQname;
	}
	
	public ParserRule getQnameRule() {
		return getQnameAccess().getRule();
	}
	
	//PrefixName:
	//	ID? ':';
	public PrefixNameElements getPrefixNameAccess() {
		return pPrefixName;
	}
	
	public ParserRule getPrefixNameRule() {
		return getPrefixNameAccess().getRule();
	}
	
	//QuotedString:
	//	STRING;
	public QuotedStringElements getQuotedStringAccess() {
		return pQuotedString;
	}
	
	public ParserRule getQuotedStringRule() {
		return getQuotedStringAccess().getRule();
	}
	
	//terminal DOUBLE:
	//	('-' | '+')? ('0'..'9'+ '.' '0'..'9'* EXPONENT | '.' '0'..'9'+ EXPONENT | '0'..'9'+ EXPONENT);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal DECIMAL:
	//	('-' | '+')? ('0'..'9'+ '.' '0'..'9'* | '.' '0'..'9'+);
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal EXPONENT:
	//	('e' | 'E') ('-' | '+')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal URIREF:
	//	'<'->'>';
	public TerminalRule getURIREFRule() {
		return tURIREF;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'" |
	//	'"""'->'"""';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
