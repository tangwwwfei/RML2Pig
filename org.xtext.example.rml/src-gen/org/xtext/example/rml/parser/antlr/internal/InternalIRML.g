/*
 * generated by Xtext 2.16.0
 */
grammar InternalIRML;

options {
	superClass=AbstractInternalAntlrParser;
	memoize=true;
}

@lexer::header {
package org.xtext.example.rml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.rml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.rml.services.IRMLGrammarAccess;

}

@parser::members {

 	private IRMLGrammarAccess grammarAccess;

    public InternalIRMLParser(TokenStream input, IRMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Mapping";
   	}

   	@Override
   	protected IRMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMappingAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMappingRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.xtext.example.rml.IRML.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getDirectiveDirectiveParserRuleCall_0_0_0());
					}
					lv_directive_0_0=ruleDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"directive",
							lv_directive_0_0,
							"org.xtext.example.rml.IRML.Directive");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getTripleTriplesParserRuleCall_0_1_0());
					}
					lv_triple_1_0=ruleTriples
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"triple",
							lv_triple_1_0,
							"org.xtext.example.rml.IRML.Triples");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleDirective
entryRuleDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	iv_ruleDirective=ruleDirective
	{ $current=$iv_ruleDirective.current; }
	EOF;

// Rule Directive
ruleDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectiveAccess().getPrefixPrefixIDParserRuleCall_0_0());
				}
				lv_prefix_0_0=rulePrefixID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectiveRule());
					}
					set(
						$current,
						"prefix",
						lv_prefix_0_0,
						"org.xtext.example.rml.IRML.PrefixID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectiveAccess().getBaseBaseParserRuleCall_1_0());
				}
				lv_base_1_0=ruleBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectiveRule());
					}
					set(
						$current,
						"base",
						lv_base_1_0,
						"org.xtext.example.rml.IRML.Base");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrefixID
entryRulePrefixID returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixIDRule()); }
	iv_rulePrefixID=rulePrefixID
	{ $current=$iv_rulePrefixID.current; }
	EOF;

// Rule PrefixID
rulePrefixID returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@prefix'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrefixIDAccess().getPrefixKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrefixIDAccess().getPrefixNamePrefixNameParserRuleCall_1_0());
				}
				lv_prefixName_1_0=rulePrefixName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrefixIDRule());
					}
					set(
						$current,
						"prefixName",
						lv_prefixName_1_0,
						"org.xtext.example.rml.IRML.PrefixName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_uriRef_2_0=RULE_URIREF
				{
					newLeafNode(lv_uriRef_2_0, grammarAccess.getPrefixIDAccess().getUriRefURIREFTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrefixIDRule());
					}
					setWithLastConsumed(
						$current,
						"uriRef",
						lv_uriRef_2_0,
						"org.xtext.example.rml.IRML.URIREF");
				}
			)
		)
	)
;

// Entry rule entryRuleBase
entryRuleBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseRule()); }
	iv_ruleBase=ruleBase
	{ $current=$iv_ruleBase.current; }
	EOF;

// Rule Base
ruleBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@base'
		{
			newLeafNode(otherlv_0, grammarAccess.getBaseAccess().getBaseKeyword_0());
		}
		(
			(
				lv_uriRef_1_0=RULE_URIREF
				{
					newLeafNode(lv_uriRef_1_0, grammarAccess.getBaseAccess().getUriRefURIREFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBaseRule());
					}
					setWithLastConsumed(
						$current,
						"uriRef",
						lv_uriRef_1_0,
						"org.xtext.example.rml.IRML.URIREF");
				}
			)
		)
	)
;

// Entry rule entryRuleTriples
entryRuleTriples returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriplesRule()); }
	iv_ruleTriples=ruleTriples
	{ $current=$iv_ruleTriples.current; }
	EOF;

// Rule Triples
ruleTriples returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0());
				}
				lv_subject_0_0=ruleSubject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriplesRule());
					}
					set(
						$current,
						"subject",
						lv_subject_0_0,
						"org.xtext.example.rml.IRML.Subject");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTriplesAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0());
				}
				lv_predicateObjectList_1_0=rulePredicateObjectList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriplesRule());
					}
					set(
						$current,
						"predicateObjectList",
						lv_predicateObjectList_1_0,
						"org.xtext.example.rml.IRML.PredicateObjectList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredicateObject
entryRulePredicateObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateObjectRule()); }
	iv_rulePredicateObject=rulePredicateObject
	{ $current=$iv_rulePredicateObject.current; }
	EOF;

// Rule PredicateObject
rulePredicateObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateObjectAccess().getVerbVerbParserRuleCall_0_0());
				}
				lv_verb_0_0=ruleVerb
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateObjectRule());
					}
					set(
						$current,
						"verb",
						lv_verb_0_0,
						"org.xtext.example.rml.IRML.Verb");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateObjectAccess().getObjectListObjectListParserRuleCall_1_0());
				}
				lv_objectList_1_0=ruleObjectList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateObjectRule());
					}
					set(
						$current,
						"objectList",
						lv_objectList_1_0,
						"org.xtext.example.rml.IRML.ObjectList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredicateObjectList
entryRulePredicateObjectList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateObjectListRule()); }
	iv_rulePredicateObjectList=rulePredicateObjectList
	{ $current=$iv_rulePredicateObjectList.current; }
	EOF;

// Rule PredicateObjectList
rulePredicateObjectList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsPredicateObjectParserRuleCall_0_0());
				}
				lv_predicateObjects_0_0=rulePredicateObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateObjectListRule());
					}
					add(
						$current,
						"predicateObjects",
						lv_predicateObjects_0_0,
						"org.xtext.example.rml.IRML.PredicateObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getPredicateObjectListAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsPredicateObjectParserRuleCall_1_1_0());
					}
					lv_predicateObjects_2_0=rulePredicateObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateObjectListRule());
						}
						add(
							$current,
							"predicateObjects",
							lv_predicateObjects_2_0,
							"org.xtext.example.rml.IRML.PredicateObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getPredicateObjectListAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleObjectList
entryRuleObjectList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectListRule()); }
	iv_ruleObjectList=ruleObjectList
	{ $current=$iv_ruleObjectList.current; }
	EOF;

// Rule ObjectList
ruleObjectList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectListAccess().getObjectsObjectParserRuleCall_0_0());
				}
				lv_objects_0_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectListRule());
					}
					add(
						$current,
						"objects",
						lv_objects_0_0,
						"org.xtext.example.rml.IRML.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getObjectListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectListAccess().getObjectsObjectParserRuleCall_1_1_0());
					}
					lv_objects_2_0=ruleObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectListRule());
						}
						add(
							$current,
							"objects",
							lv_objects_2_0,
							"org.xtext.example.rml.IRML.Object");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleVerb
entryRuleVerb returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerbRule()); }
	iv_ruleVerb=ruleVerb
	{ $current=$iv_ruleVerb.current; }
	EOF;

// Rule Verb
ruleVerb returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVerbAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerbRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"org.xtext.example.rml.IRML.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_isA_1_0='a'
				{
					newLeafNode(lv_isA_1_0, grammarAccess.getVerbAccess().getIsAAKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVerbRule());
					}
					setWithLastConsumed($current, "isA", true, "a");
				}
			)
		)
	)
;

// Entry rule entryRuleSubject
entryRuleSubject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubjectRule()); }
	iv_ruleSubject=ruleSubject
	{ $current=$iv_ruleSubject.current; }
	EOF;

// Rule Subject
ruleSubject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubjectAccess().getResourceIResourceParserRuleCall_0_0());
				}
				lv_resource_0_0=ruleiResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubjectRule());
					}
					set(
						$current,
						"resource",
						lv_resource_0_0,
						"org.xtext.example.rml.IRML.iResource");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSubjectAccess().getBlankBlankParserRuleCall_1_0());
				}
				lv_blank_1_0=ruleBlank
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubjectRule());
					}
					set(
						$current,
						"blank",
						lv_blank_1_0,
						"org.xtext.example.rml.IRML.Blank");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPredicateAccess().getIResourceParserRuleCall());
	}
	this_iResource_0=ruleiResource
	{
		$current = $this_iResource_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getResourceIResourceParserRuleCall_0_0());
				}
				lv_resource_0_0=ruleiResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					set(
						$current,
						"resource",
						lv_resource_0_0,
						"org.xtext.example.rml.IRML.iResource");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getBlankBlankParserRuleCall_1_0());
				}
				lv_blank_1_0=ruleBlank
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					set(
						$current,
						"blank",
						lv_blank_1_0,
						"org.xtext.example.rml.IRML.Blank");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getLiteralLiteralParserRuleCall_2_0());
				}
				lv_literal_2_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					set(
						$current,
						"literal",
						lv_literal_2_0,
						"org.xtext.example.rml.IRML.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLanguageString
entryRuleLanguageString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageStringRule()); }
	iv_ruleLanguageString=ruleLanguageString
	{ $current=$iv_ruleLanguageString.current; }
	EOF;

// Rule LanguageString
ruleLanguageString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLanguageStringAccess().getQutoedStringQuotedStringParserRuleCall_0_0());
				}
				lv_qutoedString_0_0=ruleQuotedString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLanguageStringRule());
					}
					set(
						$current,
						"qutoedString",
						lv_qutoedString_0_0,
						"org.xtext.example.rml.IRML.QuotedString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='@'
			{
				newLeafNode(otherlv_1, grammarAccess.getLanguageStringAccess().getCommercialAtKeyword_1_0());
			}
			(
				(
					lv_lang_2_0=RULE_ID
					{
						newLeafNode(lv_lang_2_0, grammarAccess.getLanguageStringAccess().getLangIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLanguageStringRule());
						}
						setWithLastConsumed(
							$current,
							"lang",
							lv_lang_2_0,
							"org.xtext.example.rml.IRML.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLanguageStringLanguageStringParserRuleCall_0_0());
				}
				lv_languageString_0_0=ruleLanguageString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"languageString",
						lv_languageString_0_0,
						"org.xtext.example.rml.IRML.LanguageString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getDatatypeStringDatatypeStringParserRuleCall_1_0());
				}
				lv_datatypeString_1_0=ruleDatatypeString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"datatypeString",
						lv_datatypeString_1_0,
						"org.xtext.example.rml.IRML.DatatypeString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_dword_2_0=RULE_INT
				{
					newLeafNode(lv_dword_2_0, grammarAccess.getLiteralAccess().getDwordINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"dword",
						lv_dword_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_real_3_0=RULE_DOUBLE
				{
					newLeafNode(lv_real_3_0, grammarAccess.getLiteralAccess().getRealDOUBLETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"real",
						lv_real_3_0,
						"org.xtext.example.rml.IRML.DOUBLE");
				}
			)
		)
		    |
		(
			(
				lv_decimal_4_0=RULE_DECIMAL
				{
					newLeafNode(lv_decimal_4_0, grammarAccess.getLiteralAccess().getDecimalDECIMALTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"decimal",
						lv_decimal_4_0,
						"org.xtext.example.rml.IRML.DECIMAL");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getBoolBooleanParserRuleCall_5_0());
				}
				lv_bool_5_0=ruleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"bool",
						lv_bool_5_0,
						"org.xtext.example.rml.IRML.Boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDatatypeString
entryRuleDatatypeString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeStringRule()); }
	iv_ruleDatatypeString=ruleDatatypeString
	{ $current=$iv_ruleDatatypeString.current; }
	EOF;

// Rule DatatypeString
ruleDatatypeString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeStringAccess().getQutoedStringQuotedStringParserRuleCall_0_0());
				}
				lv_qutoedString_0_0=ruleQuotedString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeStringRule());
					}
					set(
						$current,
						"qutoedString",
						lv_qutoedString_0_0,
						"org.xtext.example.rml.IRML.QuotedString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='^^'
		{
			newLeafNode(otherlv_1, grammarAccess.getDatatypeStringAccess().getCircumflexAccentCircumflexAccentKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeStringAccess().getResourceIResourceParserRuleCall_2_0());
				}
				lv_resource_2_0=ruleiResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeStringRule());
					}
					set(
						$current,
						"resource",
						lv_resource_2_0,
						"org.xtext.example.rml.IRML.iResource");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleBlank
entryRuleBlank returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlankRule()); }
	iv_ruleBlank=ruleBlank
	{ $current=$iv_ruleBlank.current; }
	EOF;

// Rule Blank
ruleBlank returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlankAccess().getNodeIDNodeIDParserRuleCall_0_0());
				}
				lv_nodeID_0_0=ruleNodeID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlankRule());
					}
					set(
						$current,
						"nodeID",
						lv_nodeID_0_0,
						"org.xtext.example.rml.IRML.NodeID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_isSquare_1_0='[]'
				{
					newLeafNode(lv_isSquare_1_0, grammarAccess.getBlankAccess().getIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlankRule());
					}
					setWithLastConsumed($current, "isSquare", true, "[]");
				}
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getBlankAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBlankAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0());
					}
					lv_predicateObjectList_3_0=rulePredicateObjectList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlankRule());
						}
						set(
							$current,
							"predicateObjectList",
							lv_predicateObjectList_3_0,
							"org.xtext.example.rml.IRML.PredicateObjectList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getBlankAccess().getRightSquareBracketKeyword_2_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBlankAccess().getCollectionCollectionParserRuleCall_3_0());
				}
				lv_collection_5_0=ruleCollection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlankRule());
					}
					set(
						$current,
						"collection",
						lv_collection_5_0,
						"org.xtext.example.rml.IRML.Collection");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleItemList
entryRuleItemList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemListRule()); }
	iv_ruleItemList=ruleItemList
	{ $current=$iv_ruleItemList.current; }
	EOF;

// Rule ItemList
ruleItemList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getItemListAccess().getObjectsObjectParserRuleCall_0_0());
				}
				lv_objects_0_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemListRule());
					}
					add(
						$current,
						"objects",
						lv_objects_0_0,
						"org.xtext.example.rml.IRML.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getItemListAccess().getObjectsObjectParserRuleCall_1_0());
				}
				lv_objects_1_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemListRule());
					}
					add(
						$current,
						"objects",
						lv_objects_1_0,
						"org.xtext.example.rml.IRML.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCollection
entryRuleCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionRule()); }
	iv_ruleCollection=ruleCollection
	{ $current=$iv_ruleCollection.current; }
	EOF;

// Rule Collection
ruleCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCollectionAccess().getCollectionAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionAccess().getItemListItemListParserRuleCall_2_0());
				}
				lv_itemList_2_0=ruleItemList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionRule());
					}
					set(
						$current,
						"itemList",
						lv_itemList_2_0,
						"org.xtext.example.rml.IRML.ItemList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCollectionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleiResource
entryRuleiResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIResourceRule()); }
	iv_ruleiResource=ruleiResource
	{ $current=$iv_ruleiResource.current; }
	EOF;

// Rule iResource
ruleiResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_uriRef_0_0=RULE_URIREF
				{
					newLeafNode(lv_uriRef_0_0, grammarAccess.getIResourceAccess().getUriRefURIREFTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIResourceRule());
					}
					setWithLastConsumed(
						$current,
						"uriRef",
						lv_uriRef_0_0,
						"org.xtext.example.rml.IRML.URIREF");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIResourceAccess().getQnameQnameParserRuleCall_1_0());
				}
				lv_qname_1_0=ruleQname
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIResourceRule());
					}
					set(
						$current,
						"qname",
						lv_qname_1_0,
						"org.xtext.example.rml.IRML.Qname");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNodeID
entryRuleNodeID returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeIDRule()); }
	iv_ruleNodeID=ruleNodeID
	{ $current=$iv_ruleNodeID.current; }
	EOF;

// Rule NodeID
ruleNodeID returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='_:'
		{
			newLeafNode(otherlv_0, grammarAccess.getNodeIDAccess().get_Keyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNodeIDAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeIDRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.rml.IRML.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleQname
entryRuleQname returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQnameRule()); }
	iv_ruleQname=ruleQname
	{ $current=$iv_ruleQname.current; }
	EOF;

// Rule Qname
ruleQname returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQnameAccess().getQnameAction_0(),
					$current);
			}
		)
		(
			((
				rulePrefixName
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getQnameAccess().getPrefixNamePrefixNameParserRuleCall_1_0());
				}
				lv_prefixName_1_0=rulePrefixName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQnameRule());
					}
					set(
						$current,
						"prefixName",
						lv_prefixName_1_0,
						"org.xtext.example.rml.IRML.PrefixName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				RULE_ID
			)
			)=>
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getQnameAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQnameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.rml.IRML.ID");
				}
			)
		)?
	)
;

// Entry rule entryRulePrefixName
entryRulePrefixName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrefixNameRule()); }
	iv_rulePrefixName=rulePrefixName
	{ $current=$iv_rulePrefixName.current.getText(); }
	EOF;

// Rule PrefixName
rulePrefixName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getPrefixNameAccess().getIDTerminalRuleCall_0());
			}
		)?
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixNameAccess().getColonKeyword_1());
		}
	)
;

// Entry rule entryRuleQuotedString
entryRuleQuotedString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuotedStringRule()); }
	iv_ruleQuotedString=ruleQuotedString
	{ $current=$iv_ruleQuotedString.current.getText(); }
	EOF;

// Rule QuotedString
ruleQuotedString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getQuotedStringAccess().getSTRINGTerminalRuleCall());
	}
;

RULE_DOUBLE : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT|'.' ('0'..'9')+ RULE_EXPONENT|('0'..'9')+ RULE_EXPONENT);

RULE_DECIMAL : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('-'|'+')? ('0'..'9')+;

RULE_URIREF : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\''|'"""' ( options {greedy=false;} : . )*'"""');

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
