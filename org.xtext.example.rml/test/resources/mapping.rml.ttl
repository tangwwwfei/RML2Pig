@prefix rr:     <http://www.w3.org/ns/r2rml#>.
@prefix rml:    <http://semweb.mmlab.be/ns/rml#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ql:     <http://semweb.mmlab.be/ns/ql#> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/> .
@prefix dcterms:<http://purl.org/dc/terms/> .
@prefix dome:   <http://domeontology.it/> .

#Person

<#Person>

    rml:logicalSource [
        rml:source "http://rml.io/data/drafts/comma_seperated.csv";
        rml:referenceFormulation ql:CSV
    ];

    rr:subjectMap [
        #would the following work as a template to generate the URIs?
        rr:template "http://somenamespace.it/Person/{first_name}{last_name}";
        rr:class foaf:Person ;
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:first_name;
        rr:objectMap [
            rml:reference "first_name";
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:last_name;
        rr:objectMap [
            rml:reference "last_name";
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:name;
        rr:objectMap [
            rr:template "{first_name} {last_name}";
            rr:termType rr:Literal
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:birthday;
        rr:objectMap [
            rml:reference "birthdate";
            rr:datatype xsd:date
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:member;
        rr:objectMap [
            rr:parentTriplesMap <#Company>;
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate dome:family_id;
        rr:objectMap [
            rml:reference "family_id";
            rr:datatype xsd:integer
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:member;
        rr:objectMap [
            rr:parentTriplesMap <#FamilyType>;
            rr:joinCondition [
                rr:child "family_type";
                rr:parent "family_type";
                ]
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ].


#Comapny

<#Company>

    rml:logicalSource [
        rml:source "http://rml.io/data/drafts/comma_seperated.csv";
        rml:referenceFormulation ql:CSV
    ];

    rr:subjectMap [
        rr:template "http://somenamespace.it/Company/{company}";
        rr:class foaf:Person;
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate foaf:name;
        rr:objectMap [
            rml:reference "company";
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ].


#FamilyType

<#FamilyType>

    rml:logicalSource [
        rml:source "http://rml.io/data/drafts/family_type.csv";
        rml:referenceFormulation ql:CSV
    ];

    rr:subjectMap [
        rr:template "http://somenamespace.it/FamilyType/{family_type}/{description}";
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate rdfs:label;
        rr:objectMap [
            rml:reference "description"
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ];

    rr:predicateObjectMap [
        rr:predicate dcterms:subject;
        rr:objectMap [
            rml:reference "family_type"
        ];
        rr:graphMap [ rr:constant <http://somegraphname.it> ];
    ].