grammar org.xtext.example.rml.IRML with org.eclipse.xtext.common.Terminals

generate iRML "http://www.xtext.org/example/rml/IRML"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Mapping:
	namespaces+=Namespace*
	docmeta=DocMetadata?
	triplesMaps+=TriplesMap*
;

Namespace:
	('@prefix'|'@base') prefix=('rr:'|'rml:'|'hydra:'|'d2rq:'|'sd:'|'csvw:'|'crml:'|'dcat:'|'fnml:'|'dcterms:'| PREFIX)? iri=ANGLE_BRACKET '.'
;

DocMetadata:
	'[]' 
	('dcterms:title' title=PROPERTY)
    ('dcterms:creator' creator=PROPERTY)? &
    ('dcterms:created' created=PROPERTY)? &
    ('dcterms:modified' modified=PROPERTY)?
;

WebAPIsDescription:
	'a' 'hydra:IriTemplate' ';'
	'hydra:template' value=PROPERTY
	('hydra:mapping' '['
		('hydra:variable' variable=PROPERTY
    	'hydra:required' require=PROPERTY)
	DRDEnd)?
;

CSVOnWebDescription:
	'a' 'csvw:Table' ';'
    'csvw:url' url=PROPERTY
    'csvw:dialect' '[' 
    	('a' 'csvw:Dialect' ';'
        ('csvw:delimiter' delimiter=PROPERTY) &
        ('csvw:encoding' encoding=PROPERTY) &
        ('csvw:header' header=PROPERTY) &
        ('csvw:headerRowCount' headerRowCount=PROPERTY)? &
        ('csvw:trim' trim=PROPERTY)?)
	DRDEnd
;

SPARQLDescription:
	('a' 'sd:Service' ';'
    ('sd:endpoint' endpoint=PROPERTY) &
    ('sd:supportedLanguage' 'sd:SPARQL11Query' ';')? &
    ('sd:resultFormat' resultFormat=PROPERTY)? 
    )
;

DatasetDescription:
	'a' 'dcat:Dataset' ';'
    'dcat:distribution'
	('['
	    ('a' 'dcat:Distribution' ';'
	    'dcat:downloadURL' downloadURL=PROPERTY)
    DRDEnd) 
;

SimpleDatasetDescription:
	('a' 'dcat:Distribution' ';')
	('dcat:downloadURL' downloadURL=PROPERTY)
;

ConditionDescription:
	('crml:condition' conditon=PROPERTY)? //three quotes
    'crml:binding' '['
        (('crml:variable' variable=PROPERTY)&
        ('rml:reference' reference=PROPERTY))
    DRDEnd
;

FunctionDescription:
	'a' 'fnml:FunctionTermMap' ';'
	'fnml:functionValue' functionValue=PROPERTY
	('rr:datatype' datatype=DataType)?
	(class=CLASS)?
;

DRDEnd returns ecore::EString :
	(']') | ('].') | (']' '.')
;

DataRetrievalDescription:
	WebAPIsDescription | CSVOnWebDescription | DatasetDescription | SPARQLDescription
	| SimpleDatasetDescription 
	| ConditionDescription | FunctionDescription
;

ReferDescription:
	LogicalSourceDescription | PredicateObjectMapDescription | (ObjectMapDescription classes+=CLASS*) | JoinConditionDescription
;

TriplesMap:
	name=ANGLE_BRACKET
	((drdesc=DataRetrievalDescription) |
		(lsdesc=ReferDescription) |
	((logicalSource = LogicalSource)
	(subjectMap = SubjectMap) &
	(predicateObjectMaps += PredicateObjectMap*)))
;

SourceDescription:
	('rml:source'|'rml:name' | 'rml:sourceName') 
		((source=PROPERTY) |
		(
			'['
				desc=DataRetrievalDescription
			(']' | '];' | ']' ';')
		))
;

LogicalSourceDescription:
	( 
		source=SourceDescription &
		('rml:iterator' iterator=PROPERTY)? &
		(('rml:referenceFormulation'|'rml:queryLanguage')referenceFormulation=PROPERTY)? &
		('rml:query' query=PROPERTY)?
	)
;

LogicalSource:
	{LogicalSource}
	'rml:logicalSource'
	((ref=PROPERTY) |
	 ('['
	    desc=LogicalSourceDescription
	End))
;

SubjectMapDescription:
	{SubjectMapDescription} (
			(termMap=TermMap)? &
			(datatype=DataType)? &
			(languageMap=LanguageMap)? &
			(type = TermType)? &
			classes+=CLASS* &
			graphMaps+=GraphMap*
		)
;

SubjectMap:
	{SubjectMap} 
	'rr:subjectMap' 
	((ref=PROPERTY) |
	('['
		desc=SubjectMapDescription
		& ('crml:equalCondition' equalName=PROPERTY)?
	End))
;

InterPredicateObjectMap:
	'['
		desc=PredicateObjectMapDescription
		& ('crml:equalCondition' equalName=PROPERTY)?
		& ('crml:fallbackMap' fallbackMap=PROPERTY)?
	End
;

PredicateObjectMap:
	'rr:predicateObjectMap' 
	((ref=PROPERTY) |
	(preobjMaps += InterPredicateObjectMap+))
;

PredicateObjectMapDescription:
	(
			(predicateMaps += PredicateMap+) &
    		(objectMaps += ObjectMap+)
    )
;

ObjectMapDescription:
	(
			(
				refObjectMap=ReferencingObjectMap |
				(termMap=TermMap & 
				(datatype=DataType)? &
				(languageMap=LanguageMap)? &
				(type = TermType)?) 
			)
			& ('crml:equalCondition' equalName=PROPERTY)?
			& ('crml:fallbackMap' fallbackMap=PROPERTY)?
			& graphMaps+=GraphMap*
	)
;

ObjectMap:
	('rr:object'objects+=PROPERTY (',' objects+=PROPERTY)*) |
	('rr:objectMap' 
		((ref=PROPERTY) |
		('['
		desc=ObjectMapDescription
		End))
	)
;

ReferencingObjectMap:
	'rr:parentTriplesMap' parentTriple=ANGLE_BRACKET (';'|'.')?
	(
		('[' joinConditions += JoinCondition+ End) |
		(joinConditions += JoinCondition)
	)?
	(conditon=ConditionDescription)?
;

JoinConditionDescription:
	('rr:child' child=PROPERTY) &
     	('rr:parent' parent=PROPERTY)
;

JoinCondition:
	'rr:joinCondition' 
	((ref=PROPERTY) |
	('['
	 	desc=JoinConditionDescription
     End))
;

PredicateMap:
	('rr:predicate' predicates+=PROPERTY (',' predicates+=PROPERTY)*) |
	('rr:predicateMap' '['
		(termMap=TermMap & (datatype=DataType)? &
				(languageMap=LanguageMap)? &
				(type = TermType)?
			& graphMaps+=GraphMap*
			& ('crml:equalCondition' equalName=PROPERTY)?
			)
	End)
;

GraphMap:
	('rr:graph' graphs+=PROPERTY (',' graphs+=PROPERTY)*) |
		('rr:graphMap' '['termMap=TermMap End)
;

LanguageMap:
	('rr:language' langs+=PROPERTY (',' langs+=PROPERTY)*) |
		('rml:languageMap' '['termMap=TermMap End)
;
//rr:subject, rr:predicate, rr:object and rr:graph
Constant:
	'rr:constant' value=PROPERTY
;

Reference:
	'rml:reference' value=PROPERTY
;

Template:
	'rr:template' value=PROPERTY
;

TermTypeValue:
	('rr:BlankNode'|'rr:Literal' | 'rr:IRI') ';'?
;

TermType:
	'rr:termType' value=TermTypeValue
;

DataType:
	'rr:datatype' value=PROPERTY|value=TermTypeValue
;

TermMap: 
	(constant=Constant | reference=Reference | template=Template)
;

CLASS:
	'rr:class' iri=PROPERTY
;

PREFIX returns ecore::EString:
	ID ':'
;

NSName returns ecore::EString:
	ID (':' ID)*
;

PROPERTY returns ecore::EString:
	('dcterms:identifier' | 'dcterms:description' | DatatypeDesc | STRING | NSName | ANGLE_BRACKET) (';'|'.')?
;

DatatypeDesc returns ecore::EString:
	STRING '^^' ID (':' ID)*// (';' | '.')
;

End:
	(']' | '];' | '].' | ']''.' | ']'';' | '],' | ']'',')
;

terminal ANGLE_BRACKET : '<' -> '>';
@Override 
terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;
@Override
terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;
@Override
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
			'"""' -> '"""'
		;
