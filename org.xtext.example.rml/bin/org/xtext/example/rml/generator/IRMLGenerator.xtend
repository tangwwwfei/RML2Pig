/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.rml.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.rml.iRML.Directive
import org.xtext.example.rml.iRML.Mapping
import org.xtext.example.rml.iRML.Triples
import org.xtext.example.rml.iRML.Subject
import org.xtext.example.rml.generator.Helper;
import java.util.Map
import java.util.HashMap

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IRMLGenerator extends AbstractGenerator {
	public static Map<String, Triples> m_NameTriple = new HashMap<String, Triples>()
	public static Map<String, Boolean> m_UsedTriple = new HashMap<String, Boolean>()
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//print("Generate:" + resource.className + ".xmi\r\n")
		var path = resource.className + ".xmi"
		fsa.generateFile(path, toXMI(resource.contents.head as Mapping))
	}
	
	protected def String toXMI(Mapping m) { 
		for (s : m.statements){
			if (s.triple !== null) {
				var name = s.triple.subject.getSubject
				m_NameTriple.put(name, s.triple)
				m_UsedTriple.put(name, false)
			}
		}
		return'''
		<?xml version="1.0" encoding="ASCII"?>
		<rml:Mapping xmi:version="2.0" 
			xmlns:xmi="http://www.omg.org/XMI" 
			xmlns:rml="http://www.xtext.org/example/rml/RML">
			«FOR s : m.statements»
				«IF s.directive !== null»
					«s.directive.generateNamespace»
				«ELSEIF s.triple !== null»
					«s.triple.generateTriple»
				«ENDIF»
			«ENDFOR»
		</rml:Mapping>
		'''
	}
	
	protected def generateNamespace(Directive ns) {
		var pf = ""
		var iri = ""
		if (ns.prefix !== null) {
			if (ns.prefix.prefixName !== null) {
				pf = ''' prefix="«ns.prefix.prefixName»"'''
			}
			iri = ''' iri="«ns.prefix.uriRef.TrimName»"'''
		}
		else if (ns.base !== null) {
			iri = ''' base="«ns.base.uriRef.TrimName»"'''
		}
		var result = '''<directives«pf»«iri»/>'''
		//print(result + "\r\n")
		return result
	}
	
	protected def String TrimName(String string) {
		return Helper.TrimName(string)
	}
	static def getTripleByName(String name) {
		m_UsedTriple.put(name, true)
		return m_NameTriple.get(name)
	}
	protected def generateTriple(Triples triple) {
		var name = triple.subject.getSubject
		var tripleName = ''' name="«name»"'''
		var ls = triple.parseLogicalSource;
		var sm = triple.parseSubjectMap;
		var pom = triple.parsePredicateObjectMap(name);
		//var fnm = triple.parseFunctionTermMap;
		var result = ""
		if (ls.isEmpty() && sm.isEmpty()) {// && pom.isEmpty() || m_UsedTriple.get(name)) {
			return ''
		}
		 
		result='''
			<triplesMaps«tripleName»>
				«ls»
				«sm»
				«pom»
			</triplesMaps>
			'''
		//print(result)
		return result
	}
	
	def String getSubject(Subject subject) {
		return Helper.getSubject(subject)
	}
	
	protected def String parseSubjectMap(Triples triples) {
		return SubjectMap.parseSubjectMap(triples)
	}
	
	protected def String parseLogicalSource(Triples triples) {
		return LogicalSource.parseLogicalSource(triples)
	}
	
	protected def String parsePredicateObjectMap(Triples triple, String owner) {
		return PredicateObjectMap.parsePredicateObjectMap(triple, owner)
	}
	
	protected def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}
	
	protected def RemoveAngleBrackets(String s) {
		var ret = s.replaceAll('%3c|%3e','')
		return ret
	}
}
