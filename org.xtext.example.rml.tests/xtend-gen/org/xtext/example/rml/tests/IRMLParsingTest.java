/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.rml.tests;

import com.google.inject.Inject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.rml.generator.IRMLGenerator;
import org.xtext.example.rml.iRML.Mapping;
import org.xtext.example.rml.tests.IRMLInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(IRMLInjectorProvider.class)
@SuppressWarnings("all")
public class IRMLParsingTest {
  @Inject
  private ParseHelper<Mapping> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      ArrayList<File> filelist = new ArrayList<File>();
      this.getFileList(filelist, "../org.xtext.example.rml/test/resources");
      for (final File file : filelist) {
        {
          String filepath = file.getPath();
          final Mapping result = this.parseHelper.parse(this.readFile(filepath));
          if ((result != null)) {
            EList<Resource.Diagnostic> errors = result.eResource().getErrors();
            boolean _isEmpty = errors.isEmpty();
            if (_isEmpty) {
              InputOutput.<String>print((("Inspect:" + filepath) + "\r\n"));
              final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
              new IRMLGenerator().doGenerate(result.eResource(), fsa, null);
              Map<String, Object> files = fsa.getAllFiles();
              Set<String> keys = files.keySet();
              for (final String key : keys) {
                {
                  FileWriter writer = new FileWriter((filepath + ".xmi"), false);
                  Object _get = files.get(key);
                  writer.write(((String) _get));
                  writer.close();
                }
              }
            } else {
              System.err.print((("Inspect:" + filepath) + "\r\n"));
            }
            for (final Resource.Diagnostic error : errors) {
              String _plus = (error + "\r\n");
              InputOutput.<String>print(_plus);
            }
            boolean _isEmpty_1 = errors.isEmpty();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("Unexpected errors: ?errors.join(\", \")?");
            Assertions.assertTrue(_isEmpty_1, _builder.toString());
          } else {
            System.err.print((("Inspect:" + filepath) + "\r\n"));
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String readFile(final String filePath) {
    try {
      StringBuffer buffer = new StringBuffer();
      FileInputStream is = new FileInputStream(filePath);
      InputStreamReader _inputStreamReader = new InputStreamReader(is);
      BufferedReader reader = new BufferedReader(_inputStreamReader);
      String line = reader.readLine();
      while ((line != null)) {
        {
          buffer.append(line);
          buffer.append("\r\n");
          line = reader.readLine();
        }
      }
      reader.close();
      is.close();
      return buffer.toString();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void getFileList(final List<File> filelist, final String strPath) {
    File dir = new File(strPath);
    File[] files = dir.listFiles();
    if ((files != null)) {
      for (final File file : files) {
        {
          String fileName = file.getName();
          boolean _isDirectory = file.isDirectory();
          if (_isDirectory) {
            this.getFileList(filelist, file.getAbsolutePath());
          } else {
            if (((((fileName.endsWith(".ttl") && (!fileName.endsWith("output.ttl"))) && (!fileName.endsWith(".out.ttl"))) && (!fileName.endsWith(".metadata.ttl"))) && (!fileName.startsWith("resource")))) {
              filelist.add(file);
            }
          }
        }
      }
    }
  }
}
