query 
	Pig2Text = 
		Pig!Program.allInstances()->
			collect(c| c.toString().writeTo(c.absolutePath+'.pig'))
	;



helper def : decode(s : String) : String =
	s.regexReplaceAll('%3c', '<').regexReplaceAll('%3e', '>');

helper context Pig!Program def: toString(indent: String): String =
	'%default current_date `date +%Y-%m-%d-%H-%M-%S`\r\n'+
	'REGISTER file:///E:/RML2PigAndScala/LoadTurtle/target/LoadTurtle.jar;\r\n' +
	'DEFINE R2PFORMAT r2ps.udf.pig.R2PFORMAT;\r\n' +
	'DEFINE R2PTOBAG r2ps.udf.pig.R2PTOBAG;\r\n' +
	'DEFINE R2PTOTUPLE r2ps.udf.pig.R2PTOTUPLE;\r\n' +
	--'DEFINE equalCondition r2ps.udf.pig.equalCondition;\r\n' +
	--'DEFINE execFunction r2ps.udf.pig.execFunction;\r\n' +
	self.statements->iterate(s; acc : String = '' | acc + thisModule.decode(s.toString()) + '\r\n') + 
	--'result = distinct result;\r\n' + 
	--'\r\nresult = foreach result generate $0,$1,CONCAT($2, \'.\');\r\n' + 
	--'\r\ndump result;'
	'store result into \'r2presult/$current_date\';'
;

helper context Pig!Define def: toString(): String =
	'DEFINE ' + self.newName + ' ' + self.oldName + ';\r\n'
;

helper context Pig!Default def: toString(): String =
	'%default '  + self.name + ' \'' + self.value + '\'\r\n'
;

helper context Pig!Register def: toString(): String =
	'Register '  + self.value + ';\r\n'
;

helper context Pig!Foreach def: toString(): String =
	let n : Integer = self.generate.size() in
	self.return + ' = foreach ' + self.relation + ' generate \r\n\t' + 
	self.generate->first().toString() + 
	self.generate->subSequence(2, n)->iterate(s; acc : String = '' | acc + ',\r\n\t' + s.toString()) +
	';\r\n'
;

helper context Pig!Cross def: toString(): String =
	self.return + ' = cross ' + self.relation1.toString()  + ',' + self.relation2.toString() + ';\r\n'
;
	
helper context Pig!Join def: toString(): String =
	self.return + ' = join ' + self.relation1.toString() + ' by ' + self.by1.toString() + ', '
	+ self.relation2.toString() + ' by ' + self.by2.toString() + ';\r\n'
;
	
helper context Pig!Load def: toString(): String =
	self.return + ' = load \'' + self.path.toString() + '\' using ' + self.using.toString() + ';\r\n'
;

helper context Pig!Union def: toString(): String =
	self.return + ' = union ' + self.relation1.toString()  + ',' + self.relation2.toString() + ';\r\n'
;

helper context Pig!Limit def: toString(): String =
	self.return + ' = limit ' + self.relation.toString()  + ' ' + self.num.toString() + ';\r\n'
;
	
helper context Pig!Expression def: toString(): String =
	self.value
;

helper context Pig!Assignment def: toString(): String =
	self.left + ' = ' + self.right.toString() + ';\r\n'
;
	
helper context Pig!Filter def: toString(): String =
	self.return + ' = filter ' + self.relation + ' by ' + self.condition + ';\r\n'
;
	
helper context Pig!Distinct def: toString(): String =
	self.return + ' = distinct ' + self.relation + ';\r\n'
;

helper context Pig!AliasedEntity def: toString(): String =
	if self.alias.oclIsUndefined() then
		self.exp
	else
		self.exp + if self.alias.size() > 0 then ' as ' + self.alias else '' endif
	endif
;

