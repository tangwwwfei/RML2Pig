/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.rml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.rml.ide.contentassist.antlr.internal.InternalIRMLParser;
import org.xtext.example.rml.services.IRMLGrammarAccess;

public class IRMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IRMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IRMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
			builder.put(grammarAccess.getDirectiveAccess().getAlternatives(), "rule__Directive__Alternatives");
			builder.put(grammarAccess.getVerbAccess().getAlternatives(), "rule__Verb__Alternatives");
			builder.put(grammarAccess.getSubjectAccess().getAlternatives(), "rule__Subject__Alternatives");
			builder.put(grammarAccess.getObjectAccess().getAlternatives(), "rule__Object__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getBlankAccess().getAlternatives(), "rule__Blank__Alternatives");
			builder.put(grammarAccess.getIResourceAccess().getAlternatives(), "rule__IResource__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getPrefixIDAccess().getGroup(), "rule__PrefixID__Group__0");
			builder.put(grammarAccess.getBaseAccess().getGroup(), "rule__Base__Group__0");
			builder.put(grammarAccess.getTriplesAccess().getGroup(), "rule__Triples__Group__0");
			builder.put(grammarAccess.getPredicateObjectAccess().getGroup(), "rule__PredicateObject__Group__0");
			builder.put(grammarAccess.getPredicateObjectListAccess().getGroup(), "rule__PredicateObjectList__Group__0");
			builder.put(grammarAccess.getPredicateObjectListAccess().getGroup_1(), "rule__PredicateObjectList__Group_1__0");
			builder.put(grammarAccess.getObjectListAccess().getGroup(), "rule__ObjectList__Group__0");
			builder.put(grammarAccess.getObjectListAccess().getGroup_1(), "rule__ObjectList__Group_1__0");
			builder.put(grammarAccess.getLanguageStringAccess().getGroup(), "rule__LanguageString__Group__0");
			builder.put(grammarAccess.getLanguageStringAccess().getGroup_1(), "rule__LanguageString__Group_1__0");
			builder.put(grammarAccess.getDatatypeStringAccess().getGroup(), "rule__DatatypeString__Group__0");
			builder.put(grammarAccess.getBlankAccess().getGroup_2(), "rule__Blank__Group_2__0");
			builder.put(grammarAccess.getItemListAccess().getGroup(), "rule__ItemList__Group__0");
			builder.put(grammarAccess.getCollectionAccess().getGroup(), "rule__Collection__Group__0");
			builder.put(grammarAccess.getNodeIDAccess().getGroup(), "rule__NodeID__Group__0");
			builder.put(grammarAccess.getQnameAccess().getGroup(), "rule__Qname__Group__0");
			builder.put(grammarAccess.getPrefixNameAccess().getGroup(), "rule__PrefixName__Group__0");
			builder.put(grammarAccess.getMappingAccess().getStatementsAssignment(), "rule__Mapping__StatementsAssignment");
			builder.put(grammarAccess.getStatementAccess().getDirectiveAssignment_0_0(), "rule__Statement__DirectiveAssignment_0_0");
			builder.put(grammarAccess.getStatementAccess().getTripleAssignment_0_1(), "rule__Statement__TripleAssignment_0_1");
			builder.put(grammarAccess.getDirectiveAccess().getPrefixAssignment_0(), "rule__Directive__PrefixAssignment_0");
			builder.put(grammarAccess.getDirectiveAccess().getBaseAssignment_1(), "rule__Directive__BaseAssignment_1");
			builder.put(grammarAccess.getPrefixIDAccess().getPrefixNameAssignment_1(), "rule__PrefixID__PrefixNameAssignment_1");
			builder.put(grammarAccess.getPrefixIDAccess().getUriRefAssignment_2(), "rule__PrefixID__UriRefAssignment_2");
			builder.put(grammarAccess.getBaseAccess().getUriRefAssignment_1(), "rule__Base__UriRefAssignment_1");
			builder.put(grammarAccess.getTriplesAccess().getSubjectAssignment_0(), "rule__Triples__SubjectAssignment_0");
			builder.put(grammarAccess.getTriplesAccess().getPredicateObjectListAssignment_1(), "rule__Triples__PredicateObjectListAssignment_1");
			builder.put(grammarAccess.getPredicateObjectAccess().getVerbAssignment_0(), "rule__PredicateObject__VerbAssignment_0");
			builder.put(grammarAccess.getPredicateObjectAccess().getObjectListAssignment_1(), "rule__PredicateObject__ObjectListAssignment_1");
			builder.put(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsAssignment_0(), "rule__PredicateObjectList__PredicateObjectsAssignment_0");
			builder.put(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsAssignment_1_1(), "rule__PredicateObjectList__PredicateObjectsAssignment_1_1");
			builder.put(grammarAccess.getObjectListAccess().getObjectsAssignment_0(), "rule__ObjectList__ObjectsAssignment_0");
			builder.put(grammarAccess.getObjectListAccess().getObjectsAssignment_1_1(), "rule__ObjectList__ObjectsAssignment_1_1");
			builder.put(grammarAccess.getVerbAccess().getPredicateAssignment_0(), "rule__Verb__PredicateAssignment_0");
			builder.put(grammarAccess.getVerbAccess().getIsAAssignment_1(), "rule__Verb__IsAAssignment_1");
			builder.put(grammarAccess.getSubjectAccess().getResourceAssignment_0(), "rule__Subject__ResourceAssignment_0");
			builder.put(grammarAccess.getSubjectAccess().getBlankAssignment_1(), "rule__Subject__BlankAssignment_1");
			builder.put(grammarAccess.getObjectAccess().getResourceAssignment_0(), "rule__Object__ResourceAssignment_0");
			builder.put(grammarAccess.getObjectAccess().getBlankAssignment_1(), "rule__Object__BlankAssignment_1");
			builder.put(grammarAccess.getObjectAccess().getLiteralAssignment_2(), "rule__Object__LiteralAssignment_2");
			builder.put(grammarAccess.getLanguageStringAccess().getQutoedStringAssignment_0(), "rule__LanguageString__QutoedStringAssignment_0");
			builder.put(grammarAccess.getLanguageStringAccess().getLangAssignment_1_1(), "rule__LanguageString__LangAssignment_1_1");
			builder.put(grammarAccess.getLiteralAccess().getLanguageStringAssignment_0(), "rule__Literal__LanguageStringAssignment_0");
			builder.put(grammarAccess.getLiteralAccess().getDatatypeStringAssignment_1(), "rule__Literal__DatatypeStringAssignment_1");
			builder.put(grammarAccess.getLiteralAccess().getDwordAssignment_2(), "rule__Literal__DwordAssignment_2");
			builder.put(grammarAccess.getLiteralAccess().getRealAssignment_3(), "rule__Literal__RealAssignment_3");
			builder.put(grammarAccess.getLiteralAccess().getDecimalAssignment_4(), "rule__Literal__DecimalAssignment_4");
			builder.put(grammarAccess.getLiteralAccess().getBoolAssignment_5(), "rule__Literal__BoolAssignment_5");
			builder.put(grammarAccess.getDatatypeStringAccess().getQutoedStringAssignment_0(), "rule__DatatypeString__QutoedStringAssignment_0");
			builder.put(grammarAccess.getDatatypeStringAccess().getResourceAssignment_2(), "rule__DatatypeString__ResourceAssignment_2");
			builder.put(grammarAccess.getBlankAccess().getNodeIDAssignment_0(), "rule__Blank__NodeIDAssignment_0");
			builder.put(grammarAccess.getBlankAccess().getIsSquareAssignment_1(), "rule__Blank__IsSquareAssignment_1");
			builder.put(grammarAccess.getBlankAccess().getPredicateObjectListAssignment_2_1(), "rule__Blank__PredicateObjectListAssignment_2_1");
			builder.put(grammarAccess.getBlankAccess().getCollectionAssignment_3(), "rule__Blank__CollectionAssignment_3");
			builder.put(grammarAccess.getItemListAccess().getObjectsAssignment_0(), "rule__ItemList__ObjectsAssignment_0");
			builder.put(grammarAccess.getItemListAccess().getObjectsAssignment_1(), "rule__ItemList__ObjectsAssignment_1");
			builder.put(grammarAccess.getCollectionAccess().getItemListAssignment_2(), "rule__Collection__ItemListAssignment_2");
			builder.put(grammarAccess.getIResourceAccess().getUriRefAssignment_0(), "rule__IResource__UriRefAssignment_0");
			builder.put(grammarAccess.getIResourceAccess().getQnameAssignment_1(), "rule__IResource__QnameAssignment_1");
			builder.put(grammarAccess.getNodeIDAccess().getNameAssignment_1(), "rule__NodeID__NameAssignment_1");
			builder.put(grammarAccess.getQnameAccess().getPrefixNameAssignment_1(), "rule__Qname__PrefixNameAssignment_1");
			builder.put(grammarAccess.getQnameAccess().getNameAssignment_2(), "rule__Qname__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IRMLGrammarAccess grammarAccess;

	@Override
	protected InternalIRMLParser createParser() {
		InternalIRMLParser result = new InternalIRMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IRMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IRMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
