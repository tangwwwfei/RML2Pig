/*
 * generated by Xtext 2.16.0
 */
grammar InternalIRML;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	memoize=true;
}

@lexer::header {
package org.xtext.example.rml.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.rml.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.rml.services.IRMLGrammarAccess;

}
@parser::members {
	private IRMLGrammarAccess grammarAccess;

	public void setGrammarAccess(IRMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMapping
entryRuleMapping
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingAccess().getStatementsAssignment()); }
		(rule__Mapping__StatementsAssignment)*
		{ after(grammarAccess.getMappingAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirective
entryRuleDirective
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectiveAccess().getAlternatives()); }
		(rule__Directive__Alternatives)
		{ after(grammarAccess.getDirectiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixID
entryRulePrefixID
:
{ before(grammarAccess.getPrefixIDRule()); }
	 rulePrefixID
{ after(grammarAccess.getPrefixIDRule()); } 
	 EOF 
;

// Rule PrefixID
rulePrefixID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixIDAccess().getGroup()); }
		(rule__PrefixID__Group__0)
		{ after(grammarAccess.getPrefixIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBase
entryRuleBase
:
{ before(grammarAccess.getBaseRule()); }
	 ruleBase
{ after(grammarAccess.getBaseRule()); } 
	 EOF 
;

// Rule Base
ruleBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseAccess().getGroup()); }
		(rule__Base__Group__0)
		{ after(grammarAccess.getBaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriples
entryRuleTriples
:
{ before(grammarAccess.getTriplesRule()); }
	 ruleTriples
{ after(grammarAccess.getTriplesRule()); } 
	 EOF 
;

// Rule Triples
ruleTriples 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriplesAccess().getGroup()); }
		(rule__Triples__Group__0)
		{ after(grammarAccess.getTriplesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateObject
entryRulePredicateObject
:
{ before(grammarAccess.getPredicateObjectRule()); }
	 rulePredicateObject
{ after(grammarAccess.getPredicateObjectRule()); } 
	 EOF 
;

// Rule PredicateObject
rulePredicateObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getGroup()); }
		(rule__PredicateObject__Group__0)
		{ after(grammarAccess.getPredicateObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateObjectList
entryRulePredicateObjectList
:
{ before(grammarAccess.getPredicateObjectListRule()); }
	 rulePredicateObjectList
{ after(grammarAccess.getPredicateObjectListRule()); } 
	 EOF 
;

// Rule PredicateObjectList
rulePredicateObjectList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateObjectListAccess().getGroup()); }
		(rule__PredicateObjectList__Group__0)
		{ after(grammarAccess.getPredicateObjectListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectList
entryRuleObjectList
:
{ before(grammarAccess.getObjectListRule()); }
	 ruleObjectList
{ after(grammarAccess.getObjectListRule()); } 
	 EOF 
;

// Rule ObjectList
ruleObjectList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectListAccess().getGroup()); }
		(rule__ObjectList__Group__0)
		{ after(grammarAccess.getObjectListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerb
entryRuleVerb
:
{ before(grammarAccess.getVerbRule()); }
	 ruleVerb
{ after(grammarAccess.getVerbRule()); } 
	 EOF 
;

// Rule Verb
ruleVerb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerbAccess().getAlternatives()); }
		(rule__Verb__Alternatives)
		{ after(grammarAccess.getVerbAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubject
entryRuleSubject
:
{ before(grammarAccess.getSubjectRule()); }
	 ruleSubject
{ after(grammarAccess.getSubjectRule()); } 
	 EOF 
;

// Rule Subject
ruleSubject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubjectAccess().getAlternatives()); }
		(rule__Subject__Alternatives)
		{ after(grammarAccess.getSubjectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getIResourceParserRuleCall()); }
		ruleiResource
		{ after(grammarAccess.getPredicateAccess().getIResourceParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getAlternatives()); }
		(rule__Object__Alternatives)
		{ after(grammarAccess.getObjectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLanguageString
entryRuleLanguageString
:
{ before(grammarAccess.getLanguageStringRule()); }
	 ruleLanguageString
{ after(grammarAccess.getLanguageStringRule()); } 
	 EOF 
;

// Rule LanguageString
ruleLanguageString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLanguageStringAccess().getGroup()); }
		(rule__LanguageString__Group__0)
		{ after(grammarAccess.getLanguageStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatypeString
entryRuleDatatypeString
:
{ before(grammarAccess.getDatatypeStringRule()); }
	 ruleDatatypeString
{ after(grammarAccess.getDatatypeStringRule()); } 
	 EOF 
;

// Rule DatatypeString
ruleDatatypeString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeStringAccess().getGroup()); }
		(rule__DatatypeString__Group__0)
		{ after(grammarAccess.getDatatypeStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlank
entryRuleBlank
:
{ before(grammarAccess.getBlankRule()); }
	 ruleBlank
{ after(grammarAccess.getBlankRule()); } 
	 EOF 
;

// Rule Blank
ruleBlank 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlankAccess().getAlternatives()); }
		(rule__Blank__Alternatives)
		{ after(grammarAccess.getBlankAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItemList
entryRuleItemList
:
{ before(grammarAccess.getItemListRule()); }
	 ruleItemList
{ after(grammarAccess.getItemListRule()); } 
	 EOF 
;

// Rule ItemList
ruleItemList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemListAccess().getGroup()); }
		(rule__ItemList__Group__0)
		{ after(grammarAccess.getItemListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollection
entryRuleCollection
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccess().getGroup()); }
		(rule__Collection__Group__0)
		{ after(grammarAccess.getCollectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleiResource
entryRuleiResource
:
{ before(grammarAccess.getIResourceRule()); }
	 ruleiResource
{ after(grammarAccess.getIResourceRule()); } 
	 EOF 
;

// Rule iResource
ruleiResource 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIResourceAccess().getAlternatives()); }
		(rule__IResource__Alternatives)
		{ after(grammarAccess.getIResourceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeID
entryRuleNodeID
:
{ before(grammarAccess.getNodeIDRule()); }
	 ruleNodeID
{ after(grammarAccess.getNodeIDRule()); } 
	 EOF 
;

// Rule NodeID
ruleNodeID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeIDAccess().getGroup()); }
		(rule__NodeID__Group__0)
		{ after(grammarAccess.getNodeIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQname
entryRuleQname
:
{ before(grammarAccess.getQnameRule()); }
	 ruleQname
{ after(grammarAccess.getQnameRule()); } 
	 EOF 
;

// Rule Qname
ruleQname 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQnameAccess().getGroup()); }
		(rule__Qname__Group__0)
		{ after(grammarAccess.getQnameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixName
entryRulePrefixName
:
{ before(grammarAccess.getPrefixNameRule()); }
	 rulePrefixName
{ after(grammarAccess.getPrefixNameRule()); } 
	 EOF 
;

// Rule PrefixName
rulePrefixName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixNameAccess().getGroup()); }
		(rule__PrefixName__Group__0)
		{ after(grammarAccess.getPrefixNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuotedString
entryRuleQuotedString
:
{ before(grammarAccess.getQuotedStringRule()); }
	 ruleQuotedString
{ after(grammarAccess.getQuotedStringRule()); } 
	 EOF 
;

// Rule QuotedString
ruleQuotedString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuotedStringAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getQuotedStringAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getDirectiveAssignment_0_0()); }
		(rule__Statement__DirectiveAssignment_0_0)
		{ after(grammarAccess.getStatementAccess().getDirectiveAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTripleAssignment_0_1()); }
		(rule__Statement__TripleAssignment_0_1)
		{ after(grammarAccess.getStatementAccess().getTripleAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getPrefixAssignment_0()); }
		(rule__Directive__PrefixAssignment_0)
		{ after(grammarAccess.getDirectiveAccess().getPrefixAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getBaseAssignment_1()); }
		(rule__Directive__BaseAssignment_1)
		{ after(grammarAccess.getDirectiveAccess().getBaseAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verb__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getPredicateAssignment_0()); }
		(rule__Verb__PredicateAssignment_0)
		{ after(grammarAccess.getVerbAccess().getPredicateAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getIsAAssignment_1()); }
		(rule__Verb__IsAAssignment_1)
		{ after(grammarAccess.getVerbAccess().getIsAAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getResourceAssignment_0()); }
		(rule__Subject__ResourceAssignment_0)
		{ after(grammarAccess.getSubjectAccess().getResourceAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubjectAccess().getBlankAssignment_1()); }
		(rule__Subject__BlankAssignment_1)
		{ after(grammarAccess.getSubjectAccess().getBlankAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getResourceAssignment_0()); }
		(rule__Object__ResourceAssignment_0)
		{ after(grammarAccess.getObjectAccess().getResourceAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getBlankAssignment_1()); }
		(rule__Object__BlankAssignment_1)
		{ after(grammarAccess.getObjectAccess().getBlankAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getLiteralAssignment_2()); }
		(rule__Object__LiteralAssignment_2)
		{ after(grammarAccess.getObjectAccess().getLiteralAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLanguageStringAssignment_0()); }
		(rule__Literal__LanguageStringAssignment_0)
		{ after(grammarAccess.getLiteralAccess().getLanguageStringAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getDatatypeStringAssignment_1()); }
		(rule__Literal__DatatypeStringAssignment_1)
		{ after(grammarAccess.getLiteralAccess().getDatatypeStringAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getDwordAssignment_2()); }
		(rule__Literal__DwordAssignment_2)
		{ after(grammarAccess.getLiteralAccess().getDwordAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getRealAssignment_3()); }
		(rule__Literal__RealAssignment_3)
		{ after(grammarAccess.getLiteralAccess().getRealAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getDecimalAssignment_4()); }
		(rule__Literal__DecimalAssignment_4)
		{ after(grammarAccess.getLiteralAccess().getDecimalAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBoolAssignment_5()); }
		(rule__Literal__BoolAssignment_5)
		{ after(grammarAccess.getLiteralAccess().getBoolAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlankAccess().getNodeIDAssignment_0()); }
		(rule__Blank__NodeIDAssignment_0)
		{ after(grammarAccess.getBlankAccess().getNodeIDAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlankAccess().getIsSquareAssignment_1()); }
		(rule__Blank__IsSquareAssignment_1)
		{ after(grammarAccess.getBlankAccess().getIsSquareAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getBlankAccess().getGroup_2()); }
		(rule__Blank__Group_2__0)
		{ after(grammarAccess.getBlankAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getBlankAccess().getCollectionAssignment_3()); }
		(rule__Blank__CollectionAssignment_3)
		{ after(grammarAccess.getBlankAccess().getCollectionAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IResource__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIResourceAccess().getUriRefAssignment_0()); }
		(rule__IResource__UriRefAssignment_0)
		{ after(grammarAccess.getIResourceAccess().getUriRefAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getIResourceAccess().getQnameAssignment_1()); }
		(rule__IResource__QnameAssignment_1)
		{ after(grammarAccess.getIResourceAccess().getQnameAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
	(rule__Statement__Alternatives_0)
	{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getStatementAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixID__Group__0__Impl
	rule__PrefixID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixIDAccess().getPrefixKeyword_0()); }
	'@prefix'
	{ after(grammarAccess.getPrefixIDAccess().getPrefixKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixID__Group__1__Impl
	rule__PrefixID__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixIDAccess().getPrefixNameAssignment_1()); }
	(rule__PrefixID__PrefixNameAssignment_1)
	{ after(grammarAccess.getPrefixIDAccess().getPrefixNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixID__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixIDAccess().getUriRefAssignment_2()); }
	(rule__PrefixID__UriRefAssignment_2)
	{ after(grammarAccess.getPrefixIDAccess().getUriRefAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Base__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Base__Group__0__Impl
	rule__Base__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseAccess().getBaseKeyword_0()); }
	'@base'
	{ after(grammarAccess.getBaseAccess().getBaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Base__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseAccess().getUriRefAssignment_1()); }
	(rule__Base__UriRefAssignment_1)
	{ after(grammarAccess.getBaseAccess().getUriRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Triples__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__0__Impl
	rule__Triples__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getSubjectAssignment_0()); }
	(rule__Triples__SubjectAssignment_0)
	{ after(grammarAccess.getTriplesAccess().getSubjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getPredicateObjectListAssignment_1()); }
	(rule__Triples__PredicateObjectListAssignment_1)
	{ after(grammarAccess.getTriplesAccess().getPredicateObjectListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__0__Impl
	rule__PredicateObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getVerbAssignment_0()); }
	(rule__PredicateObject__VerbAssignment_0)
	{ after(grammarAccess.getPredicateObjectAccess().getVerbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getObjectListAssignment_1()); }
	(rule__PredicateObject__ObjectListAssignment_1)
	{ after(grammarAccess.getPredicateObjectAccess().getObjectListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObjectList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectList__Group__0__Impl
	rule__PredicateObjectList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsAssignment_0()); }
	(rule__PredicateObjectList__PredicateObjectsAssignment_0)
	{ after(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectList__Group__1__Impl
	rule__PredicateObjectList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectListAccess().getGroup_1()); }
	(rule__PredicateObjectList__Group_1__0)*
	{ after(grammarAccess.getPredicateObjectListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectListAccess().getSemicolonKeyword_2()); }
	(';')?
	{ after(grammarAccess.getPredicateObjectListAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObjectList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectList__Group_1__0__Impl
	rule__PredicateObjectList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectListAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getPredicateObjectListAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsAssignment_1_1()); }
	(rule__PredicateObjectList__PredicateObjectsAssignment_1_1)
	{ after(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectList__Group__0__Impl
	rule__ObjectList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectListAccess().getObjectsAssignment_0()); }
	(rule__ObjectList__ObjectsAssignment_0)
	{ after(grammarAccess.getObjectListAccess().getObjectsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectListAccess().getGroup_1()); }
	(rule__ObjectList__Group_1__0)*
	{ after(grammarAccess.getObjectListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectList__Group_1__0__Impl
	rule__ObjectList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getObjectListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectListAccess().getObjectsAssignment_1_1()); }
	(rule__ObjectList__ObjectsAssignment_1_1)
	{ after(grammarAccess.getObjectListAccess().getObjectsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageString__Group__0__Impl
	rule__LanguageString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageStringAccess().getQutoedStringAssignment_0()); }
	(rule__LanguageString__QutoedStringAssignment_0)
	{ after(grammarAccess.getLanguageStringAccess().getQutoedStringAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageString__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageStringAccess().getGroup_1()); }
	(rule__LanguageString__Group_1__0)?
	{ after(grammarAccess.getLanguageStringAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageString__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageString__Group_1__0__Impl
	rule__LanguageString__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageStringAccess().getCommercialAtKeyword_1_0()); }
	'@'
	{ after(grammarAccess.getLanguageStringAccess().getCommercialAtKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageString__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageStringAccess().getLangAssignment_1_1()); }
	(rule__LanguageString__LangAssignment_1_1)
	{ after(grammarAccess.getLanguageStringAccess().getLangAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DatatypeString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeString__Group__0__Impl
	rule__DatatypeString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeStringAccess().getQutoedStringAssignment_0()); }
	(rule__DatatypeString__QutoedStringAssignment_0)
	{ after(grammarAccess.getDatatypeStringAccess().getQutoedStringAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeString__Group__1__Impl
	rule__DatatypeString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeStringAccess().getCircumflexAccentCircumflexAccentKeyword_1()); }
	'^^'
	{ after(grammarAccess.getDatatypeStringAccess().getCircumflexAccentCircumflexAccentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeString__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeStringAccess().getResourceAssignment_2()); }
	(rule__DatatypeString__ResourceAssignment_2)
	{ after(grammarAccess.getDatatypeStringAccess().getResourceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Blank__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blank__Group_2__0__Impl
	rule__Blank__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlankAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getBlankAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blank__Group_2__1__Impl
	rule__Blank__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlankAccess().getPredicateObjectListAssignment_2_1()); }
	(rule__Blank__PredicateObjectListAssignment_2_1)
	{ after(grammarAccess.getBlankAccess().getPredicateObjectListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blank__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlankAccess().getRightSquareBracketKeyword_2_2()); }
	']'
	{ after(grammarAccess.getBlankAccess().getRightSquareBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ItemList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ItemList__Group__0__Impl
	rule__ItemList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemListAccess().getObjectsAssignment_0()); }
	(rule__ItemList__ObjectsAssignment_0)
	{ after(grammarAccess.getItemListAccess().getObjectsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ItemList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemListAccess().getObjectsAssignment_1()); }
	(rule__ItemList__ObjectsAssignment_1)*
	{ after(grammarAccess.getItemListAccess().getObjectsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group__0__Impl
	rule__Collection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getCollectionAction_0()); }
	()
	{ after(grammarAccess.getCollectionAccess().getCollectionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group__1__Impl
	rule__Collection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCollectionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group__2__Impl
	rule__Collection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getItemListAssignment_2()); }
	(rule__Collection__ItemListAssignment_2)?
	{ after(grammarAccess.getCollectionAccess().getItemListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCollectionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeID__Group__0__Impl
	rule__NodeID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeIDAccess().get_Keyword_0()); }
	'_:'
	{ after(grammarAccess.getNodeIDAccess().get_Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeIDAccess().getNameAssignment_1()); }
	(rule__NodeID__NameAssignment_1)
	{ after(grammarAccess.getNodeIDAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Qname__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qname__Group__0__Impl
	rule__Qname__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQnameAccess().getQnameAction_0()); }
	()
	{ after(grammarAccess.getQnameAccess().getQnameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qname__Group__1__Impl
	rule__Qname__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQnameAccess().getPrefixNameAssignment_1()); }
	(rule__Qname__PrefixNameAssignment_1)
	{ after(grammarAccess.getQnameAccess().getPrefixNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qname__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQnameAccess().getNameAssignment_2()); }
	(rule__Qname__NameAssignment_2)?
	{ after(grammarAccess.getQnameAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixName__Group__0__Impl
	rule__PrefixName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixNameAccess().getIDTerminalRuleCall_0()); }
	(RULE_ID)?
	{ after(grammarAccess.getPrefixNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixNameAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPrefixNameAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getMappingAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__DirectiveAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getDirectiveDirectiveParserRuleCall_0_0_0()); }
		ruleDirective
		{ after(grammarAccess.getStatementAccess().getDirectiveDirectiveParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__TripleAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getTripleTriplesParserRuleCall_0_1_0()); }
		ruleTriples
		{ after(grammarAccess.getStatementAccess().getTripleTriplesParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__PrefixAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getPrefixPrefixIDParserRuleCall_0_0()); }
		rulePrefixID
		{ after(grammarAccess.getDirectiveAccess().getPrefixPrefixIDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__BaseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getBaseBaseParserRuleCall_1_0()); }
		ruleBase
		{ after(grammarAccess.getDirectiveAccess().getBaseBaseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__PrefixNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixIDAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
		rulePrefixName
		{ after(grammarAccess.getPrefixIDAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixID__UriRefAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixIDAccess().getUriRefURIREFTerminalRuleCall_2_0()); }
		RULE_URIREF
		{ after(grammarAccess.getPrefixIDAccess().getUriRefURIREFTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__UriRefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseAccess().getUriRefURIREFTerminalRuleCall_1_0()); }
		RULE_URIREF
		{ after(grammarAccess.getBaseAccess().getUriRefURIREFTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__SubjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0()); }
		ruleSubject
		{ after(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__PredicateObjectListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0()); }
		rulePredicateObjectList
		{ after(grammarAccess.getTriplesAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__VerbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getVerbVerbParserRuleCall_0_0()); }
		ruleVerb
		{ after(grammarAccess.getPredicateObjectAccess().getVerbVerbParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__ObjectListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getObjectListObjectListParserRuleCall_1_0()); }
		ruleObjectList
		{ after(grammarAccess.getPredicateObjectAccess().getObjectListObjectListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__PredicateObjectsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsPredicateObjectParserRuleCall_0_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsPredicateObjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__PredicateObjectsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsPredicateObjectParserRuleCall_1_1_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPredicateObjectListAccess().getPredicateObjectsPredicateObjectParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__ObjectsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectListAccess().getObjectsObjectParserRuleCall_0_0()); }
		ruleObject
		{ after(grammarAccess.getObjectListAccess().getObjectsObjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__ObjectsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectListAccess().getObjectsObjectParserRuleCall_1_1_0()); }
		ruleObject
		{ after(grammarAccess.getObjectListAccess().getObjectsObjectParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verb__PredicateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getPredicatePredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getVerbAccess().getPredicatePredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verb__IsAAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getIsAAKeyword_1_0()); }
		(
			{ before(grammarAccess.getVerbAccess().getIsAAKeyword_1_0()); }
			'a'
			{ after(grammarAccess.getVerbAccess().getIsAAKeyword_1_0()); }
		)
		{ after(grammarAccess.getVerbAccess().getIsAAKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__ResourceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getResourceIResourceParserRuleCall_0_0()); }
		ruleiResource
		{ after(grammarAccess.getSubjectAccess().getResourceIResourceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__BlankAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getBlankBlankParserRuleCall_1_0()); }
		ruleBlank
		{ after(grammarAccess.getSubjectAccess().getBlankBlankParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ResourceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getResourceIResourceParserRuleCall_0_0()); }
		ruleiResource
		{ after(grammarAccess.getObjectAccess().getResourceIResourceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__BlankAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getBlankBlankParserRuleCall_1_0()); }
		ruleBlank
		{ after(grammarAccess.getObjectAccess().getBlankBlankParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__LiteralAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getLiteralLiteralParserRuleCall_2_0()); }
		ruleLiteral
		{ after(grammarAccess.getObjectAccess().getLiteralLiteralParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__QutoedStringAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLanguageStringAccess().getQutoedStringQuotedStringParserRuleCall_0_0()); }
		ruleQuotedString
		{ after(grammarAccess.getLanguageStringAccess().getQutoedStringQuotedStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageString__LangAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLanguageStringAccess().getLangIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLanguageStringAccess().getLangIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__LanguageStringAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLanguageStringLanguageStringParserRuleCall_0_0()); }
		ruleLanguageString
		{ after(grammarAccess.getLiteralAccess().getLanguageStringLanguageStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__DatatypeStringAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getDatatypeStringDatatypeStringParserRuleCall_1_0()); }
		ruleDatatypeString
		{ after(grammarAccess.getLiteralAccess().getDatatypeStringDatatypeStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__DwordAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getDwordINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLiteralAccess().getDwordINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__RealAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getRealDOUBLETerminalRuleCall_3_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getLiteralAccess().getRealDOUBLETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__DecimalAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getDecimalDECIMALTerminalRuleCall_4_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getLiteralAccess().getDecimalDECIMALTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__BoolAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getBoolBooleanParserRuleCall_5_0()); }
		ruleBoolean
		{ after(grammarAccess.getLiteralAccess().getBoolBooleanParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__QutoedStringAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeStringAccess().getQutoedStringQuotedStringParserRuleCall_0_0()); }
		ruleQuotedString
		{ after(grammarAccess.getDatatypeStringAccess().getQutoedStringQuotedStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeString__ResourceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeStringAccess().getResourceIResourceParserRuleCall_2_0()); }
		ruleiResource
		{ after(grammarAccess.getDatatypeStringAccess().getResourceIResourceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__NodeIDAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlankAccess().getNodeIDNodeIDParserRuleCall_0_0()); }
		ruleNodeID
		{ after(grammarAccess.getBlankAccess().getNodeIDNodeIDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__IsSquareAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlankAccess().getIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0()); }
		(
			{ before(grammarAccess.getBlankAccess().getIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0()); }
			'[]'
			{ after(grammarAccess.getBlankAccess().getIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0()); }
		)
		{ after(grammarAccess.getBlankAccess().getIsSquareLeftSquareBracketRightSquareBracketKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__PredicateObjectListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlankAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0()); }
		rulePredicateObjectList
		{ after(grammarAccess.getBlankAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__CollectionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlankAccess().getCollectionCollectionParserRuleCall_3_0()); }
		ruleCollection
		{ after(grammarAccess.getBlankAccess().getCollectionCollectionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemList__ObjectsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemListAccess().getObjectsObjectParserRuleCall_0_0()); }
		ruleObject
		{ after(grammarAccess.getItemListAccess().getObjectsObjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemList__ObjectsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemListAccess().getObjectsObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getItemListAccess().getObjectsObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ItemListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getItemListItemListParserRuleCall_2_0()); }
		ruleItemList
		{ after(grammarAccess.getCollectionAccess().getItemListItemListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IResource__UriRefAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIResourceAccess().getUriRefURIREFTerminalRuleCall_0_0()); }
		RULE_URIREF
		{ after(grammarAccess.getIResourceAccess().getUriRefURIREFTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IResource__QnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIResourceAccess().getQnameQnameParserRuleCall_1_0()); }
		ruleQname
		{ after(grammarAccess.getIResourceAccess().getQnameQnameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeIDAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeIDAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__PrefixNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQnameAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
		rulePrefixName
		{ after(grammarAccess.getQnameAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQnameAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getQnameAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT|'.' ('0'..'9')+ RULE_EXPONENT|('0'..'9')+ RULE_EXPONENT);

RULE_DECIMAL : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('-'|'+')? ('0'..'9')+;

RULE_URIREF : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\''|'"""' ( options {greedy=false;} : . )*'"""');

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
